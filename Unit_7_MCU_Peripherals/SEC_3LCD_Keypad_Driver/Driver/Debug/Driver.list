
Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c8c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000dbc  08000dbc  00010dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000de4  08000de4  00010dec  2**0
                  CONTENTS
  4 .ARM          00000000  08000de4  08000de4  00010dec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000de4  08000dec  00010dec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000de4  08000de4  00010de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000de8  08000de8  00010de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010dec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000dec  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000dec  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010dec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000033bf  00000000  00000000  00010e15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000838  00000000  00000000  000141d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009b4  00000000  00000000  00014a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  000153c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  00015568  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002370  00000000  00000000  000156c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001b85  00000000  00000000  00017a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009609  00000000  00000000  000195bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00022bc6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000534  00000000  00000000  00022c44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000da4 	.word	0x08000da4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000da4 	.word	0x08000da4

08000170 <WAIT>:
	//Enable GPIOB clock
	RCC_GPIOB_Clock_Enable;
}

void WAIT(uint32_t time)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t counter1 , counter2;
	for(counter1 = 0 ; counter1 < time ; counter1++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <WAIT+0x26>
		for(counter2 = 0 ; counter2 < 255 ; counter2++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <WAIT+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <WAIT+0x14>
	for(counter1 = 0 ; counter1 < time ; counter1++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <WAIT+0xe>
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <EXTI9_Callback>:

void EXTI9_Callback(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	IRQ_Flag = 1;
 80001ac:	4b05      	ldr	r3, [pc, #20]	; (80001c4 <EXTI9_Callback+0x1c>)
 80001ae:	2201      	movs	r2, #1
 80001b0:	601a      	str	r2, [r3, #0]

	LCD_WRITE_STRING("IRQ EXTI9 is happened _|-");
 80001b2:	4805      	ldr	r0, [pc, #20]	; (80001c8 <EXTI9_Callback+0x20>)
 80001b4:	f000 fda6 	bl	8000d04 <LCD_WRITE_STRING>
	WAIT(1000);
 80001b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001bc:	f7ff ffd8 	bl	8000170 <WAIT>

}
 80001c0:	bf00      	nop
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	08000dbc 	.word	0x08000dbc

080001cc <main>:

int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b086      	sub	sp, #24
 80001d0:	af00      	add	r7, sp, #0
	LCD_clear_screen();*/


	//===============================L4_Unit7===================================
	//Enable clock
	RCC_GPIOA_Clock_Enable;
 80001d2:	4b19      	ldr	r3, [pc, #100]	; (8000238 <main+0x6c>)
 80001d4:	699b      	ldr	r3, [r3, #24]
 80001d6:	4a18      	ldr	r2, [pc, #96]	; (8000238 <main+0x6c>)
 80001d8:	f043 0304 	orr.w	r3, r3, #4
 80001dc:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_Clock_Enable;
 80001de:	4b16      	ldr	r3, [pc, #88]	; (8000238 <main+0x6c>)
 80001e0:	699b      	ldr	r3, [r3, #24]
 80001e2:	4a15      	ldr	r2, [pc, #84]	; (8000238 <main+0x6c>)
 80001e4:	f043 0308 	orr.w	r3, r3, #8
 80001e8:	6193      	str	r3, [r2, #24]
	RCC_AFIO_Clock_Enable ;
 80001ea:	4b13      	ldr	r3, [pc, #76]	; (8000238 <main+0x6c>)
 80001ec:	699b      	ldr	r3, [r3, #24]
 80001ee:	4a12      	ldr	r2, [pc, #72]	; (8000238 <main+0x6c>)
 80001f0:	f043 0301 	orr.w	r3, r3, #1
 80001f4:	6193      	str	r3, [r2, #24]

	LCD_INIT();
 80001f6:	f000 fd27 	bl	8000c48 <LCD_INIT>
	LCD_clear_screen();
 80001fa:	f000 fce3 	bl	8000bc4 <LCD_clear_screen>

	EXIT_PinConfig_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN       = EXTI9PB9;
 80001fe:	4a0f      	ldr	r2, [pc, #60]	; (800023c <main+0x70>)
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	ca07      	ldmia	r2, {r0, r1, r2}
 8000204:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case   = EXTI_Trigger_Rising;
 8000208:	2300      	movs	r3, #0
 800020a:	743b      	strb	r3, [r7, #16]
	EXTI_CFG.P_IRQ_CallBack = EXTI9_Callback;
 800020c:	4b0c      	ldr	r3, [pc, #48]	; (8000240 <main+0x74>)
 800020e:	617b      	str	r3, [r7, #20]
	EXTI_CFG.IRQ_Enable     = EXTI_IRQ_Enable;
 8000210:	2301      	movs	r3, #1
 8000212:	747b      	strb	r3, [r7, #17]

	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	4618      	mov	r0, r3
 8000218:	f000 f9f8 	bl	800060c <MCAL_EXTI_GPIO_Init>

	IRQ_Flag = 1;
 800021c:	4b09      	ldr	r3, [pc, #36]	; (8000244 <main+0x78>)
 800021e:	2201      	movs	r2, #1
 8000220:	601a      	str	r2, [r3, #0]

		WAIT(1);*/

		//=========================L4_Unit7===========================

		if(IRQ_Flag)
 8000222:	4b08      	ldr	r3, [pc, #32]	; (8000244 <main+0x78>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d0fb      	beq.n	8000222 <main+0x56>
		{
			LCD_clear_screen();
 800022a:	f000 fccb 	bl	8000bc4 <LCD_clear_screen>
			IRQ_Flag = 0;
 800022e:	4b05      	ldr	r3, [pc, #20]	; (8000244 <main+0x78>)
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag)
 8000234:	e7f5      	b.n	8000222 <main+0x56>
 8000236:	bf00      	nop
 8000238:	40021000 	.word	0x40021000
 800023c:	08000dd8 	.word	0x08000dd8
 8000240:	080001a9 	.word	0x080001a9
 8000244:	2000001c 	.word	0x2000001c

08000248 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000248:	480d      	ldr	r0, [pc, #52]	; (8000280 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800024a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800024c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000250:	480c      	ldr	r0, [pc, #48]	; (8000284 <LoopForever+0x6>)
  ldr r1, =_edata
 8000252:	490d      	ldr	r1, [pc, #52]	; (8000288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000254:	4a0d      	ldr	r2, [pc, #52]	; (800028c <LoopForever+0xe>)
  movs r3, #0
 8000256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000258:	e002      	b.n	8000260 <LoopCopyDataInit>

0800025a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800025a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800025c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800025e:	3304      	adds	r3, #4

08000260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000264:	d3f9      	bcc.n	800025a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000266:	4a0a      	ldr	r2, [pc, #40]	; (8000290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000268:	4c0a      	ldr	r4, [pc, #40]	; (8000294 <LoopForever+0x16>)
  movs r3, #0
 800026a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800026c:	e001      	b.n	8000272 <LoopFillZerobss>

0800026e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800026e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000270:	3204      	adds	r2, #4

08000272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000274:	d3fb      	bcc.n	800026e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000276:	f000 fd71 	bl	8000d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800027a:	f7ff ffa7 	bl	80001cc <main>

0800027e <LoopForever>:

LoopForever:
    b LoopForever
 800027e:	e7fe      	b.n	800027e <LoopForever>
  ldr   r0, =_estack
 8000280:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000288:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800028c:	08000dec 	.word	0x08000dec
  ldr r2, =_sbss
 8000290:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000294:	20000060 	.word	0x20000060

08000298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000298:	e7fe      	b.n	8000298 <ADC1_2_IRQHandler>
	...

0800029c <Enable_NVIC>:
* 					Generic Functions
* ===============================================
*/

void Enable_NVIC(uint16_t IRQ)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80002a6:	88fb      	ldrh	r3, [r7, #6]
 80002a8:	2b0f      	cmp	r3, #15
 80002aa:	d854      	bhi.n	8000356 <Enable_NVIC+0xba>
 80002ac:	a201      	add	r2, pc, #4	; (adr r2, 80002b4 <Enable_NVIC+0x18>)
 80002ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b2:	bf00      	nop
 80002b4:	080002f5 	.word	0x080002f5
 80002b8:	08000303 	.word	0x08000303
 80002bc:	08000311 	.word	0x08000311
 80002c0:	0800031f 	.word	0x0800031f
 80002c4:	0800032d 	.word	0x0800032d
 80002c8:	0800033b 	.word	0x0800033b
 80002cc:	0800033b 	.word	0x0800033b
 80002d0:	0800033b 	.word	0x0800033b
 80002d4:	0800033b 	.word	0x0800033b
 80002d8:	0800033b 	.word	0x0800033b
 80002dc:	08000349 	.word	0x08000349
 80002e0:	08000349 	.word	0x08000349
 80002e4:	08000349 	.word	0x08000349
 80002e8:	08000349 	.word	0x08000349
 80002ec:	08000349 	.word	0x08000349
 80002f0:	08000349 	.word	0x08000349
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 80002f4:	4b1a      	ldr	r3, [pc, #104]	; (8000360 <Enable_NVIC+0xc4>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a19      	ldr	r2, [pc, #100]	; (8000360 <Enable_NVIC+0xc4>)
 80002fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002fe:	6013      	str	r3, [r2, #0]
		break;
 8000300:	e029      	b.n	8000356 <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 8000302:	4b17      	ldr	r3, [pc, #92]	; (8000360 <Enable_NVIC+0xc4>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a16      	ldr	r2, [pc, #88]	; (8000360 <Enable_NVIC+0xc4>)
 8000308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800030c:	6013      	str	r3, [r2, #0]
		break;
 800030e:	e022      	b.n	8000356 <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 8000310:	4b13      	ldr	r3, [pc, #76]	; (8000360 <Enable_NVIC+0xc4>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a12      	ldr	r2, [pc, #72]	; (8000360 <Enable_NVIC+0xc4>)
 8000316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800031a:	6013      	str	r3, [r2, #0]
		break;
 800031c:	e01b      	b.n	8000356 <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 800031e:	4b10      	ldr	r3, [pc, #64]	; (8000360 <Enable_NVIC+0xc4>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a0f      	ldr	r2, [pc, #60]	; (8000360 <Enable_NVIC+0xc4>)
 8000324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000328:	6013      	str	r3, [r2, #0]
		break;
 800032a:	e014      	b.n	8000356 <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 800032c:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <Enable_NVIC+0xc4>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a0b      	ldr	r2, [pc, #44]	; (8000360 <Enable_NVIC+0xc4>)
 8000332:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000336:	6013      	str	r3, [r2, #0]
		break;
 8000338:	e00d      	b.n	8000356 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <Enable_NVIC+0xc4>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a08      	ldr	r2, [pc, #32]	; (8000360 <Enable_NVIC+0xc4>)
 8000340:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000344:	6013      	str	r3, [r2, #0]
		break;
 8000346:	e006      	b.n	8000356 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <Enable_NVIC+0xc8>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a05      	ldr	r2, [pc, #20]	; (8000364 <Enable_NVIC+0xc8>)
 800034e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000352:	6013      	str	r3, [r2, #0]
		break;
 8000354:	bf00      	nop
	}

}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	e000e100 	.word	0xe000e100
 8000364:	e000e104 	.word	0xe000e104

08000368 <Disable_NVIC>:


void Disable_NVIC(uint16_t IRQ)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000372:	88fb      	ldrh	r3, [r7, #6]
 8000374:	2b0f      	cmp	r3, #15
 8000376:	d854      	bhi.n	8000422 <Disable_NVIC+0xba>
 8000378:	a201      	add	r2, pc, #4	; (adr r2, 8000380 <Disable_NVIC+0x18>)
 800037a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800037e:	bf00      	nop
 8000380:	080003c1 	.word	0x080003c1
 8000384:	080003cf 	.word	0x080003cf
 8000388:	080003dd 	.word	0x080003dd
 800038c:	080003eb 	.word	0x080003eb
 8000390:	080003f9 	.word	0x080003f9
 8000394:	08000407 	.word	0x08000407
 8000398:	08000407 	.word	0x08000407
 800039c:	08000407 	.word	0x08000407
 80003a0:	08000407 	.word	0x08000407
 80003a4:	08000407 	.word	0x08000407
 80003a8:	08000415 	.word	0x08000415
 80003ac:	08000415 	.word	0x08000415
 80003b0:	08000415 	.word	0x08000415
 80003b4:	08000415 	.word	0x08000415
 80003b8:	08000415 	.word	0x08000415
 80003bc:	08000415 	.word	0x08000415
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable;
 80003c0:	4b1a      	ldr	r3, [pc, #104]	; (800042c <Disable_NVIC+0xc4>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a19      	ldr	r2, [pc, #100]	; (800042c <Disable_NVIC+0xc4>)
 80003c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ca:	6013      	str	r3, [r2, #0]
		break;
 80003cc:	e029      	b.n	8000422 <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable;
 80003ce:	4b17      	ldr	r3, [pc, #92]	; (800042c <Disable_NVIC+0xc4>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a16      	ldr	r2, [pc, #88]	; (800042c <Disable_NVIC+0xc4>)
 80003d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d8:	6013      	str	r3, [r2, #0]
		break;
 80003da:	e022      	b.n	8000422 <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable;
 80003dc:	4b13      	ldr	r3, [pc, #76]	; (800042c <Disable_NVIC+0xc4>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a12      	ldr	r2, [pc, #72]	; (800042c <Disable_NVIC+0xc4>)
 80003e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003e6:	6013      	str	r3, [r2, #0]
		break;
 80003e8:	e01b      	b.n	8000422 <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable;
 80003ea:	4b10      	ldr	r3, [pc, #64]	; (800042c <Disable_NVIC+0xc4>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4a0f      	ldr	r2, [pc, #60]	; (800042c <Disable_NVIC+0xc4>)
 80003f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003f4:	6013      	str	r3, [r2, #0]
		break;
 80003f6:	e014      	b.n	8000422 <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <Disable_NVIC+0xc4>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a0b      	ldr	r2, [pc, #44]	; (800042c <Disable_NVIC+0xc4>)
 80003fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000402:	6013      	str	r3, [r2, #0]
		break;
 8000404:	e00d      	b.n	8000422 <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Disable;
 8000406:	4b09      	ldr	r3, [pc, #36]	; (800042c <Disable_NVIC+0xc4>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a08      	ldr	r2, [pc, #32]	; (800042c <Disable_NVIC+0xc4>)
 800040c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000410:	6013      	str	r3, [r2, #0]
		break;
 8000412:	e006      	b.n	8000422 <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable;
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <Disable_NVIC+0xc8>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a05      	ldr	r2, [pc, #20]	; (8000430 <Disable_NVIC+0xc8>)
 800041a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800041e:	6013      	str	r3, [r2, #0]
		break;
 8000420:	bf00      	nop
	}

}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	e000e180 	.word	0xe000e180
 8000430:	e000e184 	.word	0xe000e184

08000434 <Update_EXTI>:



void Update_EXTI(EXIT_PinConfig_t *EXTI_PConfig)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	// 1-Configure GPIO to be AFIO Input <<>> Floating Input.
	GPIO_PinConfig_t PINcfg;
	// Update the GPIO pin to Input floating.
	PINcfg.GPIO_PinNumber = EXTI_PConfig->EXTI_PIN.EXTI_Pin;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	891b      	ldrh	r3, [r3, #8]
 8000440:	813b      	strh	r3, [r7, #8]
	PINcfg.GPIO_Mode      = GPIO_Mode_Input_Floating;
 8000442:	2301      	movs	r3, #1
 8000444:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_PConfig->EXTI_PIN.GPIO_Port, &PINcfg);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	f107 0208 	add.w	r2, r7, #8
 800044e:	4611      	mov	r1, r2
 8000450:	4618      	mov	r0, r3
 8000452:	f000 fa5a 	bl	800090a <MCAL_GPIO_Init>

	//===================================================================
	// 2-Update AFIO pin to be route between port A,B,C and D and with EXTI Line.

	uint8_t AFIO_EXTICR_Index    = EXTI_PConfig->EXTI_PIN.EXTI_InputLineNumber / 4 ;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	881b      	ldrh	r3, [r3, #0]
 800045a:	089b      	lsrs	r3, r3, #2
 800045c:	b29b      	uxth	r3, r3
 800045e:	73fb      	strb	r3, [r7, #15]

	uint8_t AFIO_EXTICR_Position = (EXTI_PConfig->EXTI_PIN.EXTI_InputLineNumber % 4) * 4 ;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	b2db      	uxtb	r3, r3
 8000466:	f003 0303 	and.w	r3, r3, #3
 800046a:	b2db      	uxtb	r3, r3
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	73bb      	strb	r3, [r7, #14]

	//Clear four bits first.
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF << AFIO_EXTICR_Position);
 8000470:	4a5f      	ldr	r2, [pc, #380]	; (80005f0 <Update_EXTI+0x1bc>)
 8000472:	7bfb      	ldrb	r3, [r7, #15]
 8000474:	3302      	adds	r3, #2
 8000476:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800047a:	7bbb      	ldrb	r3, [r7, #14]
 800047c:	210f      	movs	r1, #15
 800047e:	fa01 f303 	lsl.w	r3, r1, r3
 8000482:	43db      	mvns	r3, r3
 8000484:	4618      	mov	r0, r3
 8000486:	495a      	ldr	r1, [pc, #360]	; (80005f0 <Update_EXTI+0x1bc>)
 8000488:	7bfb      	ldrb	r3, [r7, #15]
 800048a:	4002      	ands	r2, r0
 800048c:	3302      	adds	r3, #2
 800048e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_Index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_PConfig->EXTI_PIN.GPIO_Port) & 0xF) << AFIO_EXTICR_Position);
 8000492:	4a57      	ldr	r2, [pc, #348]	; (80005f0 <Update_EXTI+0x1bc>)
 8000494:	7bfb      	ldrb	r3, [r7, #15]
 8000496:	3302      	adds	r3, #2
 8000498:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	4954      	ldr	r1, [pc, #336]	; (80005f4 <Update_EXTI+0x1c0>)
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d016      	beq.n	80004d4 <Update_EXTI+0xa0>
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	4953      	ldr	r1, [pc, #332]	; (80005f8 <Update_EXTI+0x1c4>)
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d00f      	beq.n	80004d0 <Update_EXTI+0x9c>
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	4951      	ldr	r1, [pc, #324]	; (80005fc <Update_EXTI+0x1c8>)
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d008      	beq.n	80004cc <Update_EXTI+0x98>
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	4950      	ldr	r1, [pc, #320]	; (8000600 <Update_EXTI+0x1cc>)
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d101      	bne.n	80004c8 <Update_EXTI+0x94>
 80004c4:	2303      	movs	r3, #3
 80004c6:	e006      	b.n	80004d6 <Update_EXTI+0xa2>
 80004c8:	2300      	movs	r3, #0
 80004ca:	e004      	b.n	80004d6 <Update_EXTI+0xa2>
 80004cc:	2302      	movs	r3, #2
 80004ce:	e002      	b.n	80004d6 <Update_EXTI+0xa2>
 80004d0:	2301      	movs	r3, #1
 80004d2:	e000      	b.n	80004d6 <Update_EXTI+0xa2>
 80004d4:	2300      	movs	r3, #0
 80004d6:	7bb9      	ldrb	r1, [r7, #14]
 80004d8:	408b      	lsls	r3, r1
 80004da:	4618      	mov	r0, r3
 80004dc:	4944      	ldr	r1, [pc, #272]	; (80005f0 <Update_EXTI+0x1bc>)
 80004de:	7bfb      	ldrb	r3, [r7, #15]
 80004e0:	4302      	orrs	r2, r0
 80004e2:	3302      	adds	r3, #2
 80004e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//===================================================================
	// 3- Update Rising and falling trigger.

	//Clear them first because may be use them in update during run time.
	EXTI->RTSR &= ~(1 << EXTI_PConfig->EXTI_PIN.EXTI_InputLineNumber);
 80004e8:	4b46      	ldr	r3, [pc, #280]	; (8000604 <Update_EXTI+0x1d0>)
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	8812      	ldrh	r2, [r2, #0]
 80004f0:	4611      	mov	r1, r2
 80004f2:	2201      	movs	r2, #1
 80004f4:	408a      	lsls	r2, r1
 80004f6:	43d2      	mvns	r2, r2
 80004f8:	4611      	mov	r1, r2
 80004fa:	4a42      	ldr	r2, [pc, #264]	; (8000604 <Update_EXTI+0x1d0>)
 80004fc:	400b      	ands	r3, r1
 80004fe:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_PConfig->EXTI_PIN.EXTI_InputLineNumber);
 8000500:	4b40      	ldr	r3, [pc, #256]	; (8000604 <Update_EXTI+0x1d0>)
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	8812      	ldrh	r2, [r2, #0]
 8000508:	4611      	mov	r1, r2
 800050a:	2201      	movs	r2, #1
 800050c:	408a      	lsls	r2, r1
 800050e:	43d2      	mvns	r2, r2
 8000510:	4611      	mov	r1, r2
 8000512:	4a3c      	ldr	r2, [pc, #240]	; (8000604 <Update_EXTI+0x1d0>)
 8000514:	400b      	ands	r3, r1
 8000516:	60d3      	str	r3, [r2, #12]

	// Check which case of trigger edge.
	if(EXTI_PConfig->Trigger_Case == EXTI_Trigger_Rising)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	7b1b      	ldrb	r3, [r3, #12]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d10b      	bne.n	8000538 <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1 << EXTI_PConfig->EXTI_PIN.EXTI_InputLineNumber);
 8000520:	4b38      	ldr	r3, [pc, #224]	; (8000604 <Update_EXTI+0x1d0>)
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	8812      	ldrh	r2, [r2, #0]
 8000528:	4611      	mov	r1, r2
 800052a:	2201      	movs	r2, #1
 800052c:	408a      	lsls	r2, r1
 800052e:	4611      	mov	r1, r2
 8000530:	4a34      	ldr	r2, [pc, #208]	; (8000604 <Update_EXTI+0x1d0>)
 8000532:	430b      	orrs	r3, r1
 8000534:	6093      	str	r3, [r2, #8]
 8000536:	e029      	b.n	800058c <Update_EXTI+0x158>
	}
	else if(EXTI_PConfig->Trigger_Case == EXTI_Trigger_Falling)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	7b1b      	ldrb	r3, [r3, #12]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d10b      	bne.n	8000558 <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1 << EXTI_PConfig->EXTI_PIN.EXTI_InputLineNumber);
 8000540:	4b30      	ldr	r3, [pc, #192]	; (8000604 <Update_EXTI+0x1d0>)
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	8812      	ldrh	r2, [r2, #0]
 8000548:	4611      	mov	r1, r2
 800054a:	2201      	movs	r2, #1
 800054c:	408a      	lsls	r2, r1
 800054e:	4611      	mov	r1, r2
 8000550:	4a2c      	ldr	r2, [pc, #176]	; (8000604 <Update_EXTI+0x1d0>)
 8000552:	430b      	orrs	r3, r1
 8000554:	60d3      	str	r3, [r2, #12]
 8000556:	e019      	b.n	800058c <Update_EXTI+0x158>
	}
	else if(EXTI_PConfig->Trigger_Case == EXTI_Trigger_RFBoth)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	7b1b      	ldrb	r3, [r3, #12]
 800055c:	2b02      	cmp	r3, #2
 800055e:	d115      	bne.n	800058c <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1 << EXTI_PConfig->EXTI_PIN.EXTI_InputLineNumber);
 8000560:	4b28      	ldr	r3, [pc, #160]	; (8000604 <Update_EXTI+0x1d0>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	8812      	ldrh	r2, [r2, #0]
 8000568:	4611      	mov	r1, r2
 800056a:	2201      	movs	r2, #1
 800056c:	408a      	lsls	r2, r1
 800056e:	4611      	mov	r1, r2
 8000570:	4a24      	ldr	r2, [pc, #144]	; (8000604 <Update_EXTI+0x1d0>)
 8000572:	430b      	orrs	r3, r1
 8000574:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_PConfig->EXTI_PIN.EXTI_InputLineNumber);
 8000576:	4b23      	ldr	r3, [pc, #140]	; (8000604 <Update_EXTI+0x1d0>)
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	8812      	ldrh	r2, [r2, #0]
 800057e:	4611      	mov	r1, r2
 8000580:	2201      	movs	r2, #1
 8000582:	408a      	lsls	r2, r1
 8000584:	4611      	mov	r1, r2
 8000586:	4a1f      	ldr	r2, [pc, #124]	; (8000604 <Update_EXTI+0x1d0>)
 8000588:	430b      	orrs	r3, r1
 800058a:	60d3      	str	r3, [r2, #12]
	}

	//===================================================================
	// 4-Update IRQ handling callback.

	GP_IRQ_CallBack[EXTI_PConfig->EXTI_PIN.EXTI_InputLineNumber] = EXTI_PConfig->P_IRQ_CallBack;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	4619      	mov	r1, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	691b      	ldr	r3, [r3, #16]
 8000596:	4a1c      	ldr	r2, [pc, #112]	; (8000608 <Update_EXTI+0x1d4>)
 8000598:	f842 3021 	str.w	r3, [r2, r1, lsl #2]


	//===================================================================
	// 5-Enable & Disable IRQ EXTI & NVIC.

	if(EXTI_PConfig->IRQ_Enable == EXTI_IRQ_Enable)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7b5b      	ldrb	r3, [r3, #13]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d110      	bne.n	80005c6 <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1 << EXTI_PConfig->EXTI_PIN.EXTI_InputLineNumber);
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <Update_EXTI+0x1d0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	8812      	ldrh	r2, [r2, #0]
 80005ac:	4611      	mov	r1, r2
 80005ae:	2201      	movs	r2, #1
 80005b0:	408a      	lsls	r2, r1
 80005b2:	4611      	mov	r1, r2
 80005b4:	4a13      	ldr	r2, [pc, #76]	; (8000604 <Update_EXTI+0x1d0>)
 80005b6:	430b      	orrs	r3, r1
 80005b8:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_PConfig->EXTI_PIN.EXTI_InputLineNumber);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff fe6c 	bl	800029c <Enable_NVIC>
	{
		EXTI->IMR &= ~(1 << EXTI_PConfig->EXTI_PIN.EXTI_InputLineNumber);
		Disable_NVIC(EXTI_PConfig->EXTI_PIN.EXTI_InputLineNumber);
	}

}
 80005c4:	e010      	b.n	80005e8 <Update_EXTI+0x1b4>
		EXTI->IMR &= ~(1 << EXTI_PConfig->EXTI_PIN.EXTI_InputLineNumber);
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <Update_EXTI+0x1d0>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	8812      	ldrh	r2, [r2, #0]
 80005ce:	4611      	mov	r1, r2
 80005d0:	2201      	movs	r2, #1
 80005d2:	408a      	lsls	r2, r1
 80005d4:	43d2      	mvns	r2, r2
 80005d6:	4611      	mov	r1, r2
 80005d8:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <Update_EXTI+0x1d0>)
 80005da:	400b      	ands	r3, r1
 80005dc:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_PConfig->EXTI_PIN.EXTI_InputLineNumber);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff fec0 	bl	8000368 <Disable_NVIC>
}
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40010000 	.word	0x40010000
 80005f4:	40010800 	.word	0x40010800
 80005f8:	40010c00 	.word	0x40010c00
 80005fc:	40011000 	.word	0x40011000
 8000600:	40011400 	.word	0x40011400
 8000604:	40010400 	.word	0x40010400
 8000608:	20000024 	.word	0x20000024

0800060c <MCAL_EXTI_GPIO_Init>:
 * @param [in]   - EXTI_PConfig: Set by @ref EXTI_define, EXIT_Trigger_define and EXIT_IRQ_define.
 * @retval       - None
 * Note          - None
 */
void MCAL_EXTI_GPIO_Init(EXIT_PinConfig_t *EXTI_PConfig)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_PConfig);
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f7ff ff0d 	bl	8000434 <Update_EXTI>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <EXTI0_IRQHandler>:
* 					ISR Functions
* ===============================================
* */

void EXTI0_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	//Clear pending register EXTI_PR by writing 1.
	EXTI->PR |= (1 << 0);
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <EXTI0_IRQHandler+0x1c>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a04      	ldr	r2, [pc, #16]	; (8000640 <EXTI0_IRQHandler+0x1c>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6153      	str	r3, [r2, #20]

	//Call IRQ.
	GP_IRQ_CallBack[0]();
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <EXTI0_IRQHandler+0x20>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4798      	blx	r3
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40010400 	.word	0x40010400
 8000644:	20000024 	.word	0x20000024

08000648 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	//Clear pending register EXTI_PR by writing 1.
	EXTI->PR |= (1 << 1);
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <EXTI1_IRQHandler+0x1c>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a04      	ldr	r2, [pc, #16]	; (8000664 <EXTI1_IRQHandler+0x1c>)
 8000652:	f043 0302 	orr.w	r3, r3, #2
 8000656:	6153      	str	r3, [r2, #20]

	//Call IRQ.
	GP_IRQ_CallBack[1]();
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <EXTI1_IRQHandler+0x20>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	4798      	blx	r3
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40010400 	.word	0x40010400
 8000668:	20000024 	.word	0x20000024

0800066c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	//Clear pending register EXTI_PR by writing 1.
	EXTI->PR |= (1 << 2);
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <EXTI2_IRQHandler+0x1c>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <EXTI2_IRQHandler+0x1c>)
 8000676:	f043 0304 	orr.w	r3, r3, #4
 800067a:	6153      	str	r3, [r2, #20]

	//Call IRQ.
	GP_IRQ_CallBack[2]();
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <EXTI2_IRQHandler+0x20>)
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	4798      	blx	r3
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40010400 	.word	0x40010400
 800068c:	20000024 	.word	0x20000024

08000690 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	//Clear pending register EXTI_PR by writing 1.
	EXTI->PR |= (1 << 3);
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <EXTI3_IRQHandler+0x1c>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <EXTI3_IRQHandler+0x1c>)
 800069a:	f043 0308 	orr.w	r3, r3, #8
 800069e:	6153      	str	r3, [r2, #20]

	//Call IRQ.
	GP_IRQ_CallBack[3]();
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <EXTI3_IRQHandler+0x20>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	4798      	blx	r3
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40010400 	.word	0x40010400
 80006b0:	20000024 	.word	0x20000024

080006b4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	//Clear pending register EXTI_PR by writing 1.
	EXTI->PR |= (1 << 4);
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <EXTI4_IRQHandler+0x1c>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <EXTI4_IRQHandler+0x1c>)
 80006be:	f043 0310 	orr.w	r3, r3, #16
 80006c2:	6153      	str	r3, [r2, #20]

	//Call IRQ.
	GP_IRQ_CallBack[4]();
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <EXTI4_IRQHandler+0x20>)
 80006c6:	691b      	ldr	r3, [r3, #16]
 80006c8:	4798      	blx	r3
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40010400 	.word	0x40010400
 80006d4:	20000024 	.word	0x20000024

080006d8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) { EXTI->PR |= (1 << 5) ; GP_IRQ_CallBack[5](); }
 80006dc:	4b26      	ldr	r3, [pc, #152]	; (8000778 <EXTI9_5_IRQHandler+0xa0>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	f003 0320 	and.w	r3, r3, #32
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d008      	beq.n	80006fa <EXTI9_5_IRQHandler+0x22>
 80006e8:	4b23      	ldr	r3, [pc, #140]	; (8000778 <EXTI9_5_IRQHandler+0xa0>)
 80006ea:	695b      	ldr	r3, [r3, #20]
 80006ec:	4a22      	ldr	r2, [pc, #136]	; (8000778 <EXTI9_5_IRQHandler+0xa0>)
 80006ee:	f043 0320 	orr.w	r3, r3, #32
 80006f2:	6153      	str	r3, [r2, #20]
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <EXTI9_5_IRQHandler+0xa4>)
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR |= (1 << 6) ; GP_IRQ_CallBack[6](); }
 80006fa:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <EXTI9_5_IRQHandler+0xa0>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000702:	2b00      	cmp	r3, #0
 8000704:	d008      	beq.n	8000718 <EXTI9_5_IRQHandler+0x40>
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <EXTI9_5_IRQHandler+0xa0>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <EXTI9_5_IRQHandler+0xa0>)
 800070c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000710:	6153      	str	r3, [r2, #20]
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <EXTI9_5_IRQHandler+0xa4>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR |= (1 << 7) ; GP_IRQ_CallBack[7](); }
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <EXTI9_5_IRQHandler+0xa0>)
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000720:	2b00      	cmp	r3, #0
 8000722:	d008      	beq.n	8000736 <EXTI9_5_IRQHandler+0x5e>
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <EXTI9_5_IRQHandler+0xa0>)
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	4a13      	ldr	r2, [pc, #76]	; (8000778 <EXTI9_5_IRQHandler+0xa0>)
 800072a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072e:	6153      	str	r3, [r2, #20]
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <EXTI9_5_IRQHandler+0xa4>)
 8000732:	69db      	ldr	r3, [r3, #28]
 8000734:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR |= (1 << 8) ; GP_IRQ_CallBack[8](); }
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <EXTI9_5_IRQHandler+0xa0>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800073e:	2b00      	cmp	r3, #0
 8000740:	d008      	beq.n	8000754 <EXTI9_5_IRQHandler+0x7c>
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <EXTI9_5_IRQHandler+0xa0>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	4a0c      	ldr	r2, [pc, #48]	; (8000778 <EXTI9_5_IRQHandler+0xa0>)
 8000748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074c:	6153      	str	r3, [r2, #20]
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <EXTI9_5_IRQHandler+0xa4>)
 8000750:	6a1b      	ldr	r3, [r3, #32]
 8000752:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR |= (1 << 9) ; GP_IRQ_CallBack[9](); }
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <EXTI9_5_IRQHandler+0xa0>)
 8000756:	695b      	ldr	r3, [r3, #20]
 8000758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800075c:	2b00      	cmp	r3, #0
 800075e:	d008      	beq.n	8000772 <EXTI9_5_IRQHandler+0x9a>
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <EXTI9_5_IRQHandler+0xa0>)
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <EXTI9_5_IRQHandler+0xa0>)
 8000766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800076a:	6153      	str	r3, [r2, #20]
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <EXTI9_5_IRQHandler+0xa4>)
 800076e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000770:	4798      	blx	r3
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40010400 	.word	0x40010400
 800077c:	20000024 	.word	0x20000024

08000780 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) { EXTI->PR |= (1 << 10) ; GP_IRQ_CallBack[10](); }
 8000784:	4b2d      	ldr	r3, [pc, #180]	; (800083c <EXTI15_10_IRQHandler+0xbc>)
 8000786:	695b      	ldr	r3, [r3, #20]
 8000788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800078c:	2b00      	cmp	r3, #0
 800078e:	d008      	beq.n	80007a2 <EXTI15_10_IRQHandler+0x22>
 8000790:	4b2a      	ldr	r3, [pc, #168]	; (800083c <EXTI15_10_IRQHandler+0xbc>)
 8000792:	695b      	ldr	r3, [r3, #20]
 8000794:	4a29      	ldr	r2, [pc, #164]	; (800083c <EXTI15_10_IRQHandler+0xbc>)
 8000796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800079a:	6153      	str	r3, [r2, #20]
 800079c:	4b28      	ldr	r3, [pc, #160]	; (8000840 <EXTI15_10_IRQHandler+0xc0>)
 800079e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a0:	4798      	blx	r3
	if(EXTI->PR & 1<<11) { EXTI->PR |= (1 << 11) ; GP_IRQ_CallBack[11](); }
 80007a2:	4b26      	ldr	r3, [pc, #152]	; (800083c <EXTI15_10_IRQHandler+0xbc>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d008      	beq.n	80007c0 <EXTI15_10_IRQHandler+0x40>
 80007ae:	4b23      	ldr	r3, [pc, #140]	; (800083c <EXTI15_10_IRQHandler+0xbc>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	4a22      	ldr	r2, [pc, #136]	; (800083c <EXTI15_10_IRQHandler+0xbc>)
 80007b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007b8:	6153      	str	r3, [r2, #20]
 80007ba:	4b21      	ldr	r3, [pc, #132]	; (8000840 <EXTI15_10_IRQHandler+0xc0>)
 80007bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007be:	4798      	blx	r3
	if(EXTI->PR & 1<<12) { EXTI->PR |= (1 << 12) ; GP_IRQ_CallBack[12](); }
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <EXTI15_10_IRQHandler+0xbc>)
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d008      	beq.n	80007de <EXTI15_10_IRQHandler+0x5e>
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <EXTI15_10_IRQHandler+0xbc>)
 80007ce:	695b      	ldr	r3, [r3, #20]
 80007d0:	4a1a      	ldr	r2, [pc, #104]	; (800083c <EXTI15_10_IRQHandler+0xbc>)
 80007d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007d6:	6153      	str	r3, [r2, #20]
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <EXTI15_10_IRQHandler+0xc0>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	4798      	blx	r3
	if(EXTI->PR & 1<<13) { EXTI->PR |= (1 << 13) ; GP_IRQ_CallBack[13](); }
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <EXTI15_10_IRQHandler+0xbc>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d008      	beq.n	80007fc <EXTI15_10_IRQHandler+0x7c>
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <EXTI15_10_IRQHandler+0xbc>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	4a13      	ldr	r2, [pc, #76]	; (800083c <EXTI15_10_IRQHandler+0xbc>)
 80007f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007f4:	6153      	str	r3, [r2, #20]
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <EXTI15_10_IRQHandler+0xc0>)
 80007f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007fa:	4798      	blx	r3
	if(EXTI->PR & 1<<14) { EXTI->PR |= (1 << 14) ; GP_IRQ_CallBack[14](); }
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <EXTI15_10_IRQHandler+0xbc>)
 80007fe:	695b      	ldr	r3, [r3, #20]
 8000800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000804:	2b00      	cmp	r3, #0
 8000806:	d008      	beq.n	800081a <EXTI15_10_IRQHandler+0x9a>
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <EXTI15_10_IRQHandler+0xbc>)
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	4a0b      	ldr	r2, [pc, #44]	; (800083c <EXTI15_10_IRQHandler+0xbc>)
 800080e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000812:	6153      	str	r3, [r2, #20]
 8000814:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <EXTI15_10_IRQHandler+0xc0>)
 8000816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000818:	4798      	blx	r3
	if(EXTI->PR & 1<<15) { EXTI->PR |= (1 << 15) ; GP_IRQ_CallBack[15](); }
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <EXTI15_10_IRQHandler+0xbc>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d008      	beq.n	8000838 <EXTI15_10_IRQHandler+0xb8>
 8000826:	4b05      	ldr	r3, [pc, #20]	; (800083c <EXTI15_10_IRQHandler+0xbc>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	4a04      	ldr	r2, [pc, #16]	; (800083c <EXTI15_10_IRQHandler+0xbc>)
 800082c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000830:	6153      	str	r3, [r2, #20]
 8000832:	4b03      	ldr	r3, [pc, #12]	; (8000840 <EXTI15_10_IRQHandler+0xc0>)
 8000834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000836:	4798      	blx	r3
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40010400 	.word	0x40010400
 8000840:	20000024 	.word	0x20000024

08000844 <GET_CRLH_Position>:

#include "GPIO_Driver_stm32f103c6.h"

//support fun to get position of bit to can read or write on it.
uint8_t GET_CRLH_Position (uint16_t PinNumber)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800084e:	88fb      	ldrh	r3, [r7, #6]
 8000850:	2b80      	cmp	r3, #128	; 0x80
 8000852:	d042      	beq.n	80008da <GET_CRLH_Position+0x96>
 8000854:	2b80      	cmp	r3, #128	; 0x80
 8000856:	dc11      	bgt.n	800087c <GET_CRLH_Position+0x38>
 8000858:	2b08      	cmp	r3, #8
 800085a:	d036      	beq.n	80008ca <GET_CRLH_Position+0x86>
 800085c:	2b08      	cmp	r3, #8
 800085e:	dc06      	bgt.n	800086e <GET_CRLH_Position+0x2a>
 8000860:	2b02      	cmp	r3, #2
 8000862:	d02e      	beq.n	80008c2 <GET_CRLH_Position+0x7e>
 8000864:	2b04      	cmp	r3, #4
 8000866:	d02e      	beq.n	80008c6 <GET_CRLH_Position+0x82>
 8000868:	2b01      	cmp	r3, #1
 800086a:	d028      	beq.n	80008be <GET_CRLH_Position+0x7a>
 800086c:	e047      	b.n	80008fe <GET_CRLH_Position+0xba>
 800086e:	2b20      	cmp	r3, #32
 8000870:	d02f      	beq.n	80008d2 <GET_CRLH_Position+0x8e>
 8000872:	2b40      	cmp	r3, #64	; 0x40
 8000874:	d02f      	beq.n	80008d6 <GET_CRLH_Position+0x92>
 8000876:	2b10      	cmp	r3, #16
 8000878:	d029      	beq.n	80008ce <GET_CRLH_Position+0x8a>
 800087a:	e040      	b.n	80008fe <GET_CRLH_Position+0xba>
 800087c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000880:	d033      	beq.n	80008ea <GET_CRLH_Position+0xa6>
 8000882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000886:	dc09      	bgt.n	800089c <GET_CRLH_Position+0x58>
 8000888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800088c:	d029      	beq.n	80008e2 <GET_CRLH_Position+0x9e>
 800088e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000892:	d028      	beq.n	80008e6 <GET_CRLH_Position+0xa2>
 8000894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000898:	d021      	beq.n	80008de <GET_CRLH_Position+0x9a>
 800089a:	e030      	b.n	80008fe <GET_CRLH_Position+0xba>
 800089c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008a0:	d027      	beq.n	80008f2 <GET_CRLH_Position+0xae>
 80008a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008a6:	dc03      	bgt.n	80008b0 <GET_CRLH_Position+0x6c>
 80008a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008ac:	d01f      	beq.n	80008ee <GET_CRLH_Position+0xaa>
 80008ae:	e026      	b.n	80008fe <GET_CRLH_Position+0xba>
 80008b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008b4:	d01f      	beq.n	80008f6 <GET_CRLH_Position+0xb2>
 80008b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80008ba:	d01e      	beq.n	80008fa <GET_CRLH_Position+0xb6>
 80008bc:	e01f      	b.n	80008fe <GET_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	e01e      	b.n	8000900 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 80008c2:	2304      	movs	r3, #4
 80008c4:	e01c      	b.n	8000900 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 80008c6:	2308      	movs	r3, #8
 80008c8:	e01a      	b.n	8000900 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 80008ca:	230c      	movs	r3, #12
 80008cc:	e018      	b.n	8000900 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 80008ce:	2310      	movs	r3, #16
 80008d0:	e016      	b.n	8000900 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 80008d2:	2314      	movs	r3, #20
 80008d4:	e014      	b.n	8000900 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 80008d6:	2318      	movs	r3, #24
 80008d8:	e012      	b.n	8000900 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 80008da:	231c      	movs	r3, #28
 80008dc:	e010      	b.n	8000900 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	e00e      	b.n	8000900 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 80008e2:	2304      	movs	r3, #4
 80008e4:	e00c      	b.n	8000900 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 80008e6:	2308      	movs	r3, #8
 80008e8:	e00a      	b.n	8000900 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 80008ea:	230c      	movs	r3, #12
 80008ec:	e008      	b.n	8000900 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 80008ee:	2310      	movs	r3, #16
 80008f0:	e006      	b.n	8000900 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 80008f2:	2314      	movs	r3, #20
 80008f4:	e004      	b.n	8000900 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 80008f6:	2318      	movs	r3, #24
 80008f8:	e002      	b.n	8000900 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 80008fa:	231c      	movs	r3, #28
 80008fc:	e000      	b.n	8000900 <GET_CRLH_Position+0xbc>
		break;
	}
	return 0;
 80008fe:	2300      	movs	r3, #0
}
 8000900:	4618      	mov	r0, r3
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr

0800090a <MCAL_GPIO_Init>:
 * @param [in]   - PinConfig pointer to GPIO_PinConfig_t structure that contain the configuration information for specific Pin.
 * @retval       - None
 * Note          - None
 */
void MCAL_GPIO_Init (GPIO_REG_typedef * GPIOx , GPIO_PinConfig_t *PinConfig)
{
 800090a:	b590      	push	{r4, r7, lr}
 800090c:	b085      	sub	sp, #20
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
 8000912:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) from 0 --> 7
	//Port configuration register high (GPIOx_CRH) from 8 --> 15

	volatile uint32_t* ConfigRegister = NULL;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
	uint8_t PIN_config = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	72fb      	strb	r3, [r7, #11]

	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8 ? &GPIOx->CRL : &GPIOx->CRH);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	2bff      	cmp	r3, #255	; 0xff
 8000922:	d801      	bhi.n	8000928 <MCAL_GPIO_Init+0x1e>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	e001      	b.n	800092c <MCAL_GPIO_Init+0x22>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3304      	adds	r3, #4
 800092c:	60fb      	str	r3, [r7, #12]

	//Clear CNF & MODE for specific bit.
	(*ConfigRegister) &= ~(0xF << GET_CRLH_Position(PinConfig->GPIO_PinNumber));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ff86 	bl	8000844 <GET_CRLH_Position>
 8000938:	4603      	mov	r3, r0
 800093a:	461a      	mov	r2, r3
 800093c:	230f      	movs	r3, #15
 800093e:	4093      	lsls	r3, r2
 8000940:	43da      	mvns	r2, r3
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	401a      	ands	r2, r3
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	601a      	str	r2, [r3, #0]

	//if pin is output.
	if((PinConfig->GPIO_Mode == GPIO_Mode_Output_Alt_Flo_OD) || (PinConfig->GPIO_Mode == GPIO_Mode_Output_Alt_Flo_PP) ||
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	789b      	ldrb	r3, [r3, #2]
 8000950:	2b07      	cmp	r3, #7
 8000952:	d00b      	beq.n	800096c <MCAL_GPIO_Init+0x62>
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	789b      	ldrb	r3, [r3, #2]
 8000958:	2b06      	cmp	r3, #6
 800095a:	d007      	beq.n	800096c <MCAL_GPIO_Init+0x62>
	   (PinConfig->GPIO_Mode == GPIO_Mode_Output_Open_Drain) || (PinConfig->GPIO_Mode == GPIO_Mode_Output_Push_Pull))
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	789b      	ldrb	r3, [r3, #2]
	if((PinConfig->GPIO_Mode == GPIO_Mode_Output_Alt_Flo_OD) || (PinConfig->GPIO_Mode == GPIO_Mode_Output_Alt_Flo_PP) ||
 8000960:	2b05      	cmp	r3, #5
 8000962:	d003      	beq.n	800096c <MCAL_GPIO_Init+0x62>
	   (PinConfig->GPIO_Mode == GPIO_Mode_Output_Open_Drain) || (PinConfig->GPIO_Mode == GPIO_Mode_Output_Push_Pull))
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	789b      	ldrb	r3, [r3, #2]
 8000968:	2b04      	cmp	r3, #4
 800096a:	d11c      	bne.n	80009a6 <MCAL_GPIO_Init+0x9c>
	{
		//Set CNF & MODE for specific bit.
		PIN_config = (((PinConfig->GPIO_Mode - 4) << 2) | (PinConfig->GPIO_Output_Speed & 0x0F)) ;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	789b      	ldrb	r3, [r3, #2]
 8000970:	3b04      	subs	r3, #4
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	b25a      	sxtb	r2, r3
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	78db      	ldrb	r3, [r3, #3]
 800097a:	b25b      	sxtb	r3, r3
 800097c:	f003 030f 	and.w	r3, r3, #15
 8000980:	b25b      	sxtb	r3, r3
 8000982:	4313      	orrs	r3, r2
 8000984:	b25b      	sxtb	r3, r3
 8000986:	72fb      	strb	r3, [r7, #11]
		//Write on RCL & RCH.
		(*ConfigRegister) |=  ((PIN_config) << GET_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000988:	7afc      	ldrb	r4, [r7, #11]
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ff58 	bl	8000844 <GET_CRLH_Position>
 8000994:	4603      	mov	r3, r0
 8000996:	fa04 f203 	lsl.w	r2, r4, r3
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	431a      	orrs	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	e038      	b.n	8000a18 <MCAL_GPIO_Init+0x10e>
	}
	//if pin is input.
	else
	{
		if((PinConfig->GPIO_Mode == GPIO_Mode_Input_Floating) || (PinConfig->GPIO_Mode == GPIO_Mode_Analog) )
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	789b      	ldrb	r3, [r3, #2]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d003      	beq.n	80009b6 <MCAL_GPIO_Init+0xac>
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	789b      	ldrb	r3, [r3, #2]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d112      	bne.n	80009dc <MCAL_GPIO_Init+0xd2>
		{
			//Set CNF & MODE for specific bit.
			PIN_config = (((PinConfig->GPIO_Mode) << 2) | (0x0 & 0x0F)) ;
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	789b      	ldrb	r3, [r3, #2]
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	72fb      	strb	r3, [r7, #11]
			//Write on RCL & RCH.
			(*ConfigRegister) |=  ((PIN_config) << GET_CRLH_Position(PinConfig->GPIO_PinNumber));
 80009be:	7afc      	ldrb	r4, [r7, #11]
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff3d 	bl	8000844 <GET_CRLH_Position>
 80009ca:	4603      	mov	r3, r0
 80009cc:	fa04 f203 	lsl.w	r2, r4, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	431a      	orrs	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	e01d      	b.n	8000a18 <MCAL_GPIO_Init+0x10e>
		}
		else if (PinConfig->GPIO_Mode == GPIO_Mode_ALT_FLO_Input) //consider as it floating
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	789b      	ldrb	r3, [r3, #2]
 80009e0:	2b08      	cmp	r3, #8
 80009e2:	d102      	bne.n	80009ea <MCAL_GPIO_Init+0xe0>
		{
			PIN_config = (((GPIO_Mode_ALT_FLO_Input) << 2) | (0x0 & 0x0F));
 80009e4:	2320      	movs	r3, #32
 80009e6:	72fb      	strb	r3, [r7, #11]
			}
		}


	}
}
 80009e8:	e016      	b.n	8000a18 <MCAL_GPIO_Init+0x10e>
			PIN_config = (((GPIO_Mode_Input_Pull_Up) << 2) | (0x0 & 0x0F));
 80009ea:	2308      	movs	r3, #8
 80009ec:	72fb      	strb	r3, [r7, #11]
			if(PinConfig->GPIO_Mode == GPIO_Mode_Input_Pull_Up)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	789b      	ldrb	r3, [r3, #2]
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d107      	bne.n	8000a06 <MCAL_GPIO_Init+0xfc>
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	683a      	ldr	r2, [r7, #0]
 80009fc:	8812      	ldrh	r2, [r2, #0]
 80009fe:	431a      	orrs	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	60da      	str	r2, [r3, #12]
}
 8000a04:	e008      	b.n	8000a18 <MCAL_GPIO_Init+0x10e>
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	8812      	ldrh	r2, [r2, #0]
 8000a0e:	43d2      	mvns	r2, r2
 8000a10:	401a      	ands	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	60da      	str	r2, [r3, #12]
}
 8000a16:	e7ff      	b.n	8000a18 <MCAL_GPIO_Init+0x10e>
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd90      	pop	{r4, r7, pc}

08000a20 <MCAL_GPIO_WritePin>:
 * @param [in]   - Value: Pin Value
 * @retval       - None
 * Note          - None
 */
void MCAL_GPIO_WritePin (GPIO_REG_typedef * GPIOx , uint16_t PinNumber , uint8_t Value)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	807b      	strh	r3, [r7, #2]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	707b      	strb	r3, [r7, #1]
	if(Value != GPIO_Pin_RESET)
 8000a30:	787b      	ldrb	r3, [r7, #1]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d003      	beq.n	8000a3e <MCAL_GPIO_WritePin+0x1e>
	{
		GPIOx->BSRR = (uint32_t)PinNumber;
 8000a36:	887a      	ldrh	r2, [r7, #2]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	611a      	str	r2, [r3, #16]
	else
	{
		GPIOx->BRR = (uint32_t)PinNumber;
	}

}
 8000a3c:	e002      	b.n	8000a44 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000a3e:	887a      	ldrh	r2, [r7, #2]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	615a      	str	r2, [r3, #20]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr

08000a4e <MCAL_GPIO_WritePort>:
 * @param [in]   - Value: Pin Value
 * @retval       - None
 * Note          - None
 */
void MCAL_GPIO_WritePort (GPIO_REG_typedef * GPIOx , uint16_t Value)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
 8000a56:	460b      	mov	r3, r1
 8000a58:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value;
 8000a5a:	887a      	ldrh	r2, [r7, #2]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	60da      	str	r2, [r3, #12]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
	...

08000a6c <LCD_GPIO_init>:
	uint32_t i, j;
	for (i = 0; i < time; i++)
		for (j = 0; j < 255; j++);
}*/

void LCD_GPIO_init() {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 8000a70:	4b52      	ldr	r3, [pc, #328]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000a72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a76:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_Output_Push_Pull;
 8000a78:	4b50      	ldr	r3, [pc, #320]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000a7e:	4b4f      	ldr	r3, [pc, #316]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000a84:	494d      	ldr	r1, [pc, #308]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000a86:	484e      	ldr	r0, [pc, #312]	; (8000bc0 <LCD_GPIO_init+0x154>)
 8000a88:	f7ff ff3f 	bl	800090a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 8000a8c:	4b4b      	ldr	r3, [pc, #300]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a92:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_Output_Push_Pull;
 8000a94:	4b49      	ldr	r3, [pc, #292]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000a96:	2204      	movs	r2, #4
 8000a98:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000a9a:	4b48      	ldr	r3, [pc, #288]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000aa0:	4946      	ldr	r1, [pc, #280]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000aa2:	4847      	ldr	r0, [pc, #284]	; (8000bc0 <LCD_GPIO_init+0x154>)
 8000aa4:	f7ff ff31 	bl	800090a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 8000aa8:	4b44      	ldr	r3, [pc, #272]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aae:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_Output_Push_Pull;
 8000ab0:	4b42      	ldr	r3, [pc, #264]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000ab2:	2204      	movs	r2, #4
 8000ab4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000ab6:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000abc:	493f      	ldr	r1, [pc, #252]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000abe:	4840      	ldr	r0, [pc, #256]	; (8000bc0 <LCD_GPIO_init+0x154>)
 8000ac0:	f7ff ff23 	bl	800090a <MCAL_GPIO_Init>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000ac4:	4b3d      	ldr	r3, [pc, #244]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_Output_Push_Pull;
 8000aca:	4b3c      	ldr	r3, [pc, #240]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000acc:	2204      	movs	r2, #4
 8000ace:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000ad0:	4b3a      	ldr	r3, [pc, #232]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000ad6:	4939      	ldr	r1, [pc, #228]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000ad8:	4839      	ldr	r0, [pc, #228]	; (8000bc0 <LCD_GPIO_init+0x154>)
 8000ada:	f7ff ff16 	bl	800090a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000ade:	4b37      	ldr	r3, [pc, #220]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_Output_Push_Pull;
 8000ae4:	4b35      	ldr	r3, [pc, #212]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000aea:	4b34      	ldr	r3, [pc, #208]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000af0:	4932      	ldr	r1, [pc, #200]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000af2:	4833      	ldr	r0, [pc, #204]	; (8000bc0 <LCD_GPIO_init+0x154>)
 8000af4:	f7ff ff09 	bl	800090a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000af8:	4b30      	ldr	r3, [pc, #192]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000afa:	2204      	movs	r2, #4
 8000afc:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_Output_Push_Pull;
 8000afe:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b00:	2204      	movs	r2, #4
 8000b02:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000b04:	4b2d      	ldr	r3, [pc, #180]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000b0a:	492c      	ldr	r1, [pc, #176]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b0c:	482c      	ldr	r0, [pc, #176]	; (8000bc0 <LCD_GPIO_init+0x154>)
 8000b0e:	f7ff fefc 	bl	800090a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000b12:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b14:	2208      	movs	r2, #8
 8000b16:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_Output_Push_Pull;
 8000b18:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000b1e:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000b24:	4925      	ldr	r1, [pc, #148]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b26:	4826      	ldr	r0, [pc, #152]	; (8000bc0 <LCD_GPIO_init+0x154>)
 8000b28:	f7ff feef 	bl	800090a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000b2c:	4b23      	ldr	r3, [pc, #140]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b2e:	2210      	movs	r2, #16
 8000b30:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_Output_Push_Pull;
 8000b32:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b34:	2204      	movs	r2, #4
 8000b36:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000b38:	4b20      	ldr	r3, [pc, #128]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000b3e:	491f      	ldr	r1, [pc, #124]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b40:	481f      	ldr	r0, [pc, #124]	; (8000bc0 <LCD_GPIO_init+0x154>)
 8000b42:	f7ff fee2 	bl	800090a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000b46:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b48:	2220      	movs	r2, #32
 8000b4a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_Output_Push_Pull;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b4e:	2204      	movs	r2, #4
 8000b50:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000b52:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000b58:	4918      	ldr	r1, [pc, #96]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b5a:	4819      	ldr	r0, [pc, #100]	; (8000bc0 <LCD_GPIO_init+0x154>)
 8000b5c:	f7ff fed5 	bl	800090a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b62:	2240      	movs	r2, #64	; 0x40
 8000b64:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_Output_Push_Pull;
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b68:	2204      	movs	r2, #4
 8000b6a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000b72:	4912      	ldr	r1, [pc, #72]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b74:	4812      	ldr	r0, [pc, #72]	; (8000bc0 <LCD_GPIO_init+0x154>)
 8000b76:	f7ff fec8 	bl	800090a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b7c:	2280      	movs	r2, #128	; 0x80
 8000b7e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_Output_Push_Pull;
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b82:	2204      	movs	r2, #4
 8000b84:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000b8c:	490b      	ldr	r1, [pc, #44]	; (8000bbc <LCD_GPIO_init+0x150>)
 8000b8e:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <LCD_GPIO_init+0x154>)
 8000b90:	f7ff febb 	bl	800090a <MCAL_GPIO_Init>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_Pin_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9a:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <LCD_GPIO_init+0x154>)
 8000b9c:	f7ff ff40 	bl	8000a20 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_Pin_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba6:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <LCD_GPIO_init+0x154>)
 8000ba8:	f7ff ff3a 	bl	8000a20 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_Pin_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb2:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <LCD_GPIO_init+0x154>)
 8000bb4:	f7ff ff34 	bl	8000a20 <MCAL_GPIO_WritePin>

}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000020 	.word	0x20000020
 8000bc0:	40010800 	.word	0x40010800

08000bc4 <LCD_clear_screen>:

void LCD_clear_screen() {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 f857 	bl	8000c7c <LCD_WRITE_COMMAND>
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <LCD_lcd_kick>:

void LCD_lcd_kick() {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_Pin_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bde:	4807      	ldr	r0, [pc, #28]	; (8000bfc <LCD_lcd_kick+0x28>)
 8000be0:	f7ff ff1e 	bl	8000a20 <MCAL_GPIO_WritePin>
	WAIT(50);
 8000be4:	2032      	movs	r0, #50	; 0x32
 8000be6:	f7ff fac3 	bl	8000170 <WAIT>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_Pin_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <LCD_lcd_kick+0x28>)
 8000bf2:	f7ff ff15 	bl	8000a20 <MCAL_GPIO_WritePin>
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40010800 	.word	0x40010800

08000c00 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	460a      	mov	r2, r1
 8000c0a:	71fb      	strb	r3, [r7, #7]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d108      	bne.n	8000c28 <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 8000c16:	79bb      	ldrb	r3, [r7, #6]
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d805      	bhi.n	8000c28 <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 8000c1c:	79bb      	ldrb	r3, [r7, #6]
 8000c1e:	3b80      	subs	r3, #128	; 0x80
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f82a 	bl	8000c7c <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d108      	bne.n	8000c40 <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 8000c2e:	79bb      	ldrb	r3, [r7, #6]
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d805      	bhi.n	8000c40 <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 8000c34:	79bb      	ldrb	r3, [r7, #6]
 8000c36:	3b40      	subs	r3, #64	; 0x40
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f81e 	bl	8000c7c <LCD_WRITE_COMMAND>
		}
	}
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <LCD_INIT>:

void LCD_INIT() {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

	WAIT(20);
 8000c4c:	2014      	movs	r0, #20
 8000c4e:	f7ff fa8f 	bl	8000170 <WAIT>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 8000c52:	f7ff ff0b 	bl	8000a6c <LCD_GPIO_init>
	//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	//	DataDir_LCD_PORT = 0xFF;
	WAIT(15);
 8000c56:	200f      	movs	r0, #15
 8000c58:	f7ff fa8a 	bl	8000170 <WAIT>

	LCD_clear_screen();
 8000c5c:	f7ff ffb2 	bl	8000bc4 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000c60:	2038      	movs	r0, #56	; 0x38
 8000c62:	f000 f80b 	bl	8000c7c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000c66:	2006      	movs	r0, #6
 8000c68:	f000 f808 	bl	8000c7c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000c6c:	2080      	movs	r0, #128	; 0x80
 8000c6e:	f000 f805 	bl	8000c7c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000c72:	200f      	movs	r0, #15
 8000c74:	f000 f802 	bl	8000c7c <LCD_WRITE_COMMAND>
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_Pin_RESET);
	//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(unsigned char command) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
	//	LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	480b      	ldr	r0, [pc, #44]	; (8000cbc <LCD_WRITE_COMMAND+0x40>)
 8000c8e:	f7ff fede 	bl	8000a4e <MCAL_GPIO_WritePort>
	//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
	//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
	//	LCD_CTRL->CRL = command;
	//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_Pin_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c98:	4808      	ldr	r0, [pc, #32]	; (8000cbc <LCD_WRITE_COMMAND+0x40>)
 8000c9a:	f7ff fec1 	bl	8000a20 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_Pin_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca4:	4805      	ldr	r0, [pc, #20]	; (8000cbc <LCD_WRITE_COMMAND+0x40>)
 8000ca6:	f7ff febb 	bl	8000a20 <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	WAIT(1);
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff fa60 	bl	8000170 <WAIT>
	LCD_lcd_kick();
 8000cb0:	f7ff ff90 	bl	8000bd4 <LCD_lcd_kick>

}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40010800 	.word	0x40010800

08000cc0 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	//	LCD_check_lcd_isbusy();
	//	LCD_CTRL->CRL = character;
	//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePort(LCD_CTRL, character);
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480b      	ldr	r0, [pc, #44]	; (8000d00 <LCD_WRITE_CHAR+0x40>)
 8000cd2:	f7ff febc 	bl	8000a4e <MCAL_GPIO_WritePort>
	//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_Pin_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cdc:	4808      	ldr	r0, [pc, #32]	; (8000d00 <LCD_WRITE_CHAR+0x40>)
 8000cde:	f7ff fe9f 	bl	8000a20 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_Pin_SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <LCD_WRITE_CHAR+0x40>)
 8000cea:	f7ff fe99 	bl	8000a20 <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~(1 << RW_SWITCH);
	//	LCD_CTRL |= (1 << RS_SWITCH);
	WAIT(1);
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f7ff fa3e 	bl	8000170 <WAIT>
	LCD_lcd_kick();
 8000cf4:	f7ff ff6e 	bl	8000bd4 <LCD_lcd_kick>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40010800 	.word	0x40010800

08000d04 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000d10:	e01c      	b.n	8000d4c <LCD_WRITE_STRING+0x48>
		count++;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	3301      	adds	r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ffcd 	bl	8000cc0 <LCD_WRITE_CHAR>
		if (count == 16) {
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2b10      	cmp	r3, #16
 8000d2a:	d104      	bne.n	8000d36 <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2002      	movs	r0, #2
 8000d30:	f7ff ff66 	bl	8000c00 <LCD_GOTO_XY>
 8000d34:	e00a      	b.n	8000d4c <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2b20      	cmp	r3, #32
 8000d3a:	d107      	bne.n	8000d4c <LCD_WRITE_STRING+0x48>
			LCD_clear_screen();
 8000d3c:	f7ff ff42 	bl	8000bc4 <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 8000d40:	2100      	movs	r1, #0
 8000d42:	2001      	movs	r0, #1
 8000d44:	f7ff ff5c 	bl	8000c00 <LCD_GOTO_XY>
			count = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1de      	bne.n	8000d12 <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <__libc_init_array>:
 8000d5c:	b570      	push	{r4, r5, r6, lr}
 8000d5e:	2500      	movs	r5, #0
 8000d60:	4e0c      	ldr	r6, [pc, #48]	; (8000d94 <__libc_init_array+0x38>)
 8000d62:	4c0d      	ldr	r4, [pc, #52]	; (8000d98 <__libc_init_array+0x3c>)
 8000d64:	1ba4      	subs	r4, r4, r6
 8000d66:	10a4      	asrs	r4, r4, #2
 8000d68:	42a5      	cmp	r5, r4
 8000d6a:	d109      	bne.n	8000d80 <__libc_init_array+0x24>
 8000d6c:	f000 f81a 	bl	8000da4 <_init>
 8000d70:	2500      	movs	r5, #0
 8000d72:	4e0a      	ldr	r6, [pc, #40]	; (8000d9c <__libc_init_array+0x40>)
 8000d74:	4c0a      	ldr	r4, [pc, #40]	; (8000da0 <__libc_init_array+0x44>)
 8000d76:	1ba4      	subs	r4, r4, r6
 8000d78:	10a4      	asrs	r4, r4, #2
 8000d7a:	42a5      	cmp	r5, r4
 8000d7c:	d105      	bne.n	8000d8a <__libc_init_array+0x2e>
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
 8000d80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d84:	4798      	blx	r3
 8000d86:	3501      	adds	r5, #1
 8000d88:	e7ee      	b.n	8000d68 <__libc_init_array+0xc>
 8000d8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d8e:	4798      	blx	r3
 8000d90:	3501      	adds	r5, #1
 8000d92:	e7f2      	b.n	8000d7a <__libc_init_array+0x1e>
 8000d94:	08000de4 	.word	0x08000de4
 8000d98:	08000de4 	.word	0x08000de4
 8000d9c:	08000de4 	.word	0x08000de4
 8000da0:	08000de8 	.word	0x08000de8

08000da4 <_init>:
 8000da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000da6:	bf00      	nop
 8000da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000daa:	bc08      	pop	{r3}
 8000dac:	469e      	mov	lr, r3
 8000dae:	4770      	bx	lr

08000db0 <_fini>:
 8000db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db2:	bf00      	nop
 8000db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000db6:	bc08      	pop	{r3}
 8000db8:	469e      	mov	lr, r3
 8000dba:	4770      	bx	lr
