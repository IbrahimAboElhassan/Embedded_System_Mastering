
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b4  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cb  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027c  00000000  00000000  00000e43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000010c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000336  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000035  00000000  00000000  0000144e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001483  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <i2c_Set_Address>:

#include "i2c.h"

void i2c_Set_Address (unsigned char address)
{
	TWAR = address;	
  6c:	82 b9       	out	0x02, r24	; 2
  6e:	08 95       	ret

00000070 <i2c_Read>:
}
unsigned char i2c_Read (unsigned char ack)
{
	unsigned char x = 0;
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  70:	84 ec       	ldi	r24, 0xC4	; 196
  72:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & 1<<7) == 0);
  74:	06 b6       	in	r0, 0x36	; 54
  76:	07 fe       	sbrs	r0, 7
  78:	fd cf       	rjmp	.-6      	; 0x74 <i2c_Read+0x4>
	while ((TWSR) != 0x60) x = TWSR;
  7a:	81 b1       	in	r24, 0x01	; 1
  7c:	80 36       	cpi	r24, 0x60	; 96
  7e:	21 f0       	breq	.+8      	; 0x88 <i2c_Read+0x18>
  80:	81 b1       	in	r24, 0x01	; 1
  82:	81 b1       	in	r24, 0x01	; 1
  84:	80 36       	cpi	r24, 0x60	; 96
  86:	e1 f7       	brne	.-8      	; 0x80 <i2c_Read+0x10>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  88:	84 ec       	ldi	r24, 0xC4	; 196
  8a:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & 1<<7) == 0);
  8c:	06 b6       	in	r0, 0x36	; 54
  8e:	07 fe       	sbrs	r0, 7
  90:	fd cf       	rjmp	.-6      	; 0x8c <i2c_Read+0x1c>
	while ((TWSR) != 0x80) x = TWSR; 
  92:	81 b1       	in	r24, 0x01	; 1
  94:	80 38       	cpi	r24, 0x80	; 128
  96:	21 f0       	breq	.+8      	; 0xa0 <i2c_Read+0x30>
  98:	81 b1       	in	r24, 0x01	; 1
  9a:	81 b1       	in	r24, 0x01	; 1
  9c:	80 38       	cpi	r24, 0x80	; 128
  9e:	e1 f7       	brne	.-8      	; 0x98 <i2c_Read+0x28>
	return TWDR;
  a0:	83 b1       	in	r24, 0x03	; 3
	
  a2:	08 95       	ret

000000a4 <main>:
#include "i2c.h"


int main(void)
{
	DDRA = 0xFF;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	8a bb       	out	0x1a, r24	; 26
	i2c_Set_Address(0b11010000);
  a8:	80 ed       	ldi	r24, 0xD0	; 208
  aa:	0e 94 36 00 	call	0x6c	; 0x6c <i2c_Set_Address>
	
    while (1) 
    {
		PORTA = i2c_Read(1);
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	0e 94 38 00 	call	0x70	; 0x70 <i2c_Read>
  b4:	8b bb       	out	0x1b, r24	; 27
  b6:	fb cf       	rjmp	.-10     	; 0xae <main+0xa>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
