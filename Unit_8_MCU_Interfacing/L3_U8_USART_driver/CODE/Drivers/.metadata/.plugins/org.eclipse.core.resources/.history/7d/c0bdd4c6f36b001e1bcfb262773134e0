/*
 * EXIT_Driver_stm32f103c6.c
 *
 *  Created on: Oct 6, 2023
 *      Author: Ibrahim Abo Elhassan
 */



#include "RCC_Driver_stm32f103c6.h"


/*Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
 Set and cleared by software to control the division factor of the APB Low speed clock (PCLK1).
 0xx: HCLK not divided
 100: HCLK divided by 2
 101: HCLK divided by 4
 110: HCLK divided by 8
 111: HCLK divided by 16 */
const uint8_t APBPrescTable[8U] = {0, 0, 0, 0, 1, 2, 3, 4};

/* Bits 7:4 HPRE[3:0]: AHB prescaler
 Set and cleared by software to control AHB clock division factor.
 0xxx: SYSCLK not divided
 1000: SYSCLK divided by 2
 1001: SYSCLK divided by 4
 1010: SYSCLK divided by 8
 1011: SYSCLK divided by 16
 1100: SYSCLK divided by 64
 1101: SYSCLK divided by 128
 1110: SYSCLK divided by 256
 1111: SYSCLK divided by 512 */
const uint8_t AHBprescTable[16U] = {0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

uint32_t MCAL_RCC_Get_System_CLK_Freq(void)
{

}
uint32_t MCAL_RCC_Get_HCLK_Freq(void)
{
	return (MCAL_RCC_Get_System_CLK_Freq() >> AHBprescTable[(RCC->CFGR >> 4) & 0xF]);
}
uint32_t MCAL_RCC_Get_PCLK1_Freq(void)
{
	//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return (MCAL_RCC_Get_HCLK_Freq() >> APBPrescTable[(RCC->CFGR >> 8) & 0b111]);
}
uint32_t MCAL_RCC_Get_PCLK2_Freq(void)
{
	//Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return (MCAL_RCC_Get_HCLK_Freq() >> APBPrescTable[(RCC->CFGR >> 11) & 0b111]);
}









