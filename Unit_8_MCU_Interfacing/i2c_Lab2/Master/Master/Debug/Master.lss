
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ea  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064d  00000000  00000000  00000a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b6  00000000  00000000  0000109f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001458  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000399  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f6  00000000  00000000  00001879  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000196f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  64:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <i2c_Init>:

#include "i2c.h"
#define prescaler 1

void i2c_Init (unsigned long SCL_Clock)
{
  6c:	9b 01       	movw	r18, r22
  6e:	ac 01       	movw	r20, r24
	TWBR = (unsigned char) (((F_CPU / SCL_Clock) - 16) / (2*prescaler));
  70:	60 e0       	ldi	r22, 0x00	; 0
  72:	74 e2       	ldi	r23, 0x24	; 36
  74:	84 ef       	ldi	r24, 0xF4	; 244
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	0e 94 7f 00 	call	0xfe	; 0xfe <__udivmodsi4>
  7c:	da 01       	movw	r26, r20
  7e:	c9 01       	movw	r24, r18
  80:	40 97       	sbiw	r24, 0x10	; 16
  82:	a1 09       	sbc	r26, r1
  84:	b1 09       	sbc	r27, r1
  86:	b6 95       	lsr	r27
  88:	a7 95       	ror	r26
  8a:	97 95       	ror	r25
  8c:	87 95       	ror	r24
  8e:	80 b9       	out	0x00, r24	; 0
  90:	08 95       	ret

00000092 <i2c_Start>:
	
}

void i2c_Start (void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  92:	84 ea       	ldi	r24, 0xA4	; 164
  94:	86 bf       	out	0x36, r24	; 54
	while (TWCR & (1<<7) == 0);
  96:	86 b7       	in	r24, 0x36	; 54
	while ((TWSR) != 0x08);
  98:	81 b1       	in	r24, 0x01	; 1
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	e9 f7       	brne	.-6      	; 0x98 <i2c_Start+0x6>
}
  9e:	08 95       	ret

000000a0 <i2c_Write>:

void i2c_Write (unsigned char data)
{
	TWDR = data;
  a0:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
  a2:	84 e8       	ldi	r24, 0x84	; 132
  a4:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & 0x80) == 0);  
  a6:	06 b6       	in	r0, 0x36	; 54
  a8:	07 fe       	sbrs	r0, 7
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <i2c_Write+0x6>
	
}
  ac:	08 95       	ret

000000ae <i2c_Read>:

unsigned char i2c_Read (unsigned char ack)
{
	TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
  ae:	84 ec       	ldi	r24, 0xC4	; 196
  b0:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & 0x80)==0);
  b2:	06 b6       	in	r0, 0x36	; 54
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <i2c_Read+0x4>
	return TWDR;
  b8:	83 b1       	in	r24, 0x03	; 3
}
  ba:	08 95       	ret

000000bc <i2c_Stop>:

void i2c_Stop (void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);	
  bc:	84 e9       	ldi	r24, 0x94	; 148
  be:	86 bf       	out	0x36, r24	; 54
  c0:	08 95       	ret

000000c2 <main>:
#include "i2c.h"

int main(void)
{
	unsigned char ch;
	DDRA=0xFF;                                   
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	8a bb       	out	0x1a, r24	; 26
	i2c_Init(0x48);                           
  c6:	68 e4       	ldi	r22, 0x48	; 72
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 36 00 	call	0x6c	; 0x6c <i2c_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	80 e7       	ldi	r24, 0x70	; 112
  d6:	92 e0       	ldi	r25, 0x02	; 2
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x16>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x20>
  e2:	00 00       	nop
	while (1)
	{
		_delay_ms(50);
		i2c_Start();                       
  e4:	0e 94 49 00 	call	0x92	; 0x92 <i2c_Start>
		i2c_Write(0b11010000+1);          
  e8:	81 ed       	ldi	r24, 0xD1	; 209
  ea:	0e 94 50 00 	call	0xa0	; 0xa0 <i2c_Write>
		ch=i2c_Read(0);                  
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 57 00 	call	0xae	; 0xae <i2c_Read>
  f4:	c8 2f       	mov	r28, r24
		i2c_Stop();
  f6:	0e 94 5e 00 	call	0xbc	; 0xbc <i2c_Stop>
		PORTA=ch;
  fa:	cb bb       	out	0x1b, r28	; 27
  fc:	ea cf       	rjmp	.-44     	; 0xd2 <main+0x10>

000000fe <__udivmodsi4>:
  fe:	a1 e2       	ldi	r26, 0x21	; 33
 100:	1a 2e       	mov	r1, r26
 102:	aa 1b       	sub	r26, r26
 104:	bb 1b       	sub	r27, r27
 106:	fd 01       	movw	r30, r26
 108:	0d c0       	rjmp	.+26     	; 0x124 <__udivmodsi4_ep>

0000010a <__udivmodsi4_loop>:
 10a:	aa 1f       	adc	r26, r26
 10c:	bb 1f       	adc	r27, r27
 10e:	ee 1f       	adc	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	a2 17       	cp	r26, r18
 114:	b3 07       	cpc	r27, r19
 116:	e4 07       	cpc	r30, r20
 118:	f5 07       	cpc	r31, r21
 11a:	20 f0       	brcs	.+8      	; 0x124 <__udivmodsi4_ep>
 11c:	a2 1b       	sub	r26, r18
 11e:	b3 0b       	sbc	r27, r19
 120:	e4 0b       	sbc	r30, r20
 122:	f5 0b       	sbc	r31, r21

00000124 <__udivmodsi4_ep>:
 124:	66 1f       	adc	r22, r22
 126:	77 1f       	adc	r23, r23
 128:	88 1f       	adc	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	1a 94       	dec	r1
 12e:	69 f7       	brne	.-38     	; 0x10a <__udivmodsi4_loop>
 130:	60 95       	com	r22
 132:	70 95       	com	r23
 134:	80 95       	com	r24
 136:	90 95       	com	r25
 138:	9b 01       	movw	r18, r22
 13a:	ac 01       	movw	r20, r24
 13c:	bd 01       	movw	r22, r26
 13e:	cf 01       	movw	r24, r30
 140:	08 95       	ret

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
