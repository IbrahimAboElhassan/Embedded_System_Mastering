
Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d50  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000e80  08000e80  00010e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e98  08000e98  00010ea0  2**0
                  CONTENTS
  4 .ARM          00000000  08000e98  08000e98  00010ea0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e98  08000ea0  00010ea0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e98  08000e98  00010e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e9c  08000e9c  00010e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ea0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000000  08000ea0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08000ea0  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ea0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000050f7  00000000  00000000  00010ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c51  00000000  00000000  00015fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d1c  00000000  00000000  00016c11  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000228  00000000  00000000  00017930  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c0  00000000  00000000  00017b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000280b  00000000  00000000  00017d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000277b  00000000  00000000  0001a523  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a86f  00000000  00000000  0001cc9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002750d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006d4  00000000  00000000  00027588  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e68 	.word	0x08000e68

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e68 	.word	0x08000e68

08000170 <CLOCK_init>:


}

void CLOCK_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enable GPIOA clock
	RCC_GPIOA_Clock_Enable;
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <CLOCK_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <CLOCK_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	//Enable GPIOB clock
	RCC_GPIOB_Clock_Enable;
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <CLOCK_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <CLOCK_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	//Enable AFIO clock
	RCC_AFIO_Clock_Enable;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <CLOCK_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <CLOCK_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <SPI_IRQ_callback>:


void SPI_IRQ_callback(struct S_IRQ_SRC irq_SCR)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	7138      	strb	r0, [r7, #4]
#ifdef MCU_Act_As_Slave
	if(irq_SCR.RXNE)
 80001ac:	793b      	ldrb	r3, [r7, #4]
 80001ae:	f003 0302 	and.w	r3, r3, #2
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d00c      	beq.n	80001d2 <SPI_IRQ_callback+0x2e>
	{
		ch = 0xF;
 80001b8:	4b08      	ldr	r3, [pc, #32]	; (80001dc <SPI_IRQ_callback+0x38>)
 80001ba:	220f      	movs	r2, #15
 80001bc:	701a      	strb	r2, [r3, #0]
		MCAL_SPI_TX_RX(SPI1, &ch, Disable);
 80001be:	2201      	movs	r2, #1
 80001c0:	4906      	ldr	r1, [pc, #24]	; (80001dc <SPI_IRQ_callback+0x38>)
 80001c2:	4807      	ldr	r0, [pc, #28]	; (80001e0 <SPI_IRQ_callback+0x3c>)
 80001c4:	f000 fb7a 	bl	80008bc <MCAL_SPI_TX_RX>
		MCAL_USART_SendData(USART1, &ch, enable);
 80001c8:	2200      	movs	r2, #0
 80001ca:	4904      	ldr	r1, [pc, #16]	; (80001dc <SPI_IRQ_callback+0x38>)
 80001cc:	4805      	ldr	r0, [pc, #20]	; (80001e4 <SPI_IRQ_callback+0x40>)
 80001ce:	f000 fd59 	bl	8000c84 <MCAL_USART_SendData>
	}
#endif
}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	2000002c 	.word	0x2000002c
 80001e0:	40013000 	.word	0x40013000
 80001e4:	40013800 	.word	0x40013800

080001e8 <IRQ_callback>:


void IRQ_callback()
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
	MCAL_SPI_TX_RX(SPI1, &ch, Enable);
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);

#endif
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr

080001f4 <main>:




int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b08c      	sub	sp, #48	; 0x30
 80001f8:	af00      	add	r7, sp, #0
	//=====================L5_U8_SPI//=====================//

	// UART INIT

	USART_PinConfig_t U_CFG;
	CLOCK_init();
 80001fa:	f7ff ffb9 	bl	8000170 <CLOCK_init>
	U_CFG.BaudRate = USART_BaudRate_115200;
 80001fe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000202:	623b      	str	r3, [r7, #32]
	U_CFG.HwFlowControl = USART_HwFlowControl_NONE;
 8000204:	2300      	movs	r3, #0
 8000206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	U_CFG.IRQ_Enable = USART_IRQ_Enable_RXNEIE;
 800020a:	2320      	movs	r3, #32
 800020c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	U_CFG.P_IRQ_Callback = IRQ_callback;
 8000210:	4b1e      	ldr	r3, [pc, #120]	; (800028c <main+0x98>)
 8000212:	62fb      	str	r3, [r7, #44]	; 0x2c
	U_CFG.Parity_Check = USART_Parity_Check_NONE;
 8000214:	2300      	movs	r3, #0
 8000216:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	U_CFG.Data_Length = USART_Data_Length_8B;
 800021a:	2300      	movs	r3, #0
 800021c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	U_CFG.StopBit = USART_StopBit_1;
 8000220:	2300      	movs	r3, #0
 8000222:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	U_CFG.USART_Mode = USART_Mode_TX_RX;
 8000226:	230c      	movs	r3, #12
 8000228:	773b      	strb	r3, [r7, #28]

	MCAL_USART_Init(USART1, &U_CFG);
 800022a:	f107 031c 	add.w	r3, r7, #28
 800022e:	4619      	mov	r1, r3
 8000230:	4817      	ldr	r0, [pc, #92]	; (8000290 <main+0x9c>)
 8000232:	f000 fc65 	bl	8000b00 <MCAL_USART_Init>
	MCAL_USART_GPIO_SET_PIN(USART1);
 8000236:	4816      	ldr	r0, [pc, #88]	; (8000290 <main+0x9c>)
 8000238:	f000 fd6e 	bl	8000d18 <MCAL_USART_GPIO_SET_PIN>

	// SPI INIT

	// Common Configuration
	SPI_PinConfig_t SPI_PinCFG;
	SPI_PinCFG.CLK_Phase = SPI_CLK_Phase_second_clock_transition;
 800023c:	2301      	movs	r3, #1
 800023e:	81fb      	strh	r3, [r7, #14]
	SPI_PinCFG.CLK_Polarity = SPI_CLK_Polarity_Idle_High;
 8000240:	2302      	movs	r3, #2
 8000242:	81bb      	strh	r3, [r7, #12]
	SPI_PinCFG.Data_Size = SPI_Data_Size_8bits;
 8000244:	2300      	movs	r3, #0
 8000246:	817b      	strh	r3, [r7, #10]
	SPI_PinCFG.Frame_Format = SPI_Frame_Format_MSB_transmitted_first;
 8000248:	2300      	movs	r3, #0
 800024a:	813b      	strh	r3, [r7, #8]
	// Assume it is default pclk2 = 8MHz
	SPI_PinCFG.SPI_Clock_Frequency = SPI_Clock_Frequency_8;
 800024c:	2310      	movs	r3, #16
 800024e:	827b      	strh	r3, [r7, #18]
	SPI_PinCFG.Communication_Mode = SPI_Direction_2Lines;
 8000250:	2300      	movs	r3, #0
 8000252:	80fb      	strh	r3, [r7, #6]

	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
#endif

#ifdef MCU_Act_As_Slave
	SPI_PinCFG.Device_Mode = SPI_Device_Mode_Slave;
 8000254:	2300      	movs	r3, #0
 8000256:	80bb      	strh	r3, [r7, #4]
	SPI_PinCFG.IRQ_Enable = SPI_IRQ_Enable_RXNEIE;
 8000258:	2340      	movs	r3, #64	; 0x40
 800025a:	82bb      	strh	r3, [r7, #20]
	SPI_PinCFG.NSS = SPI_NSS_HW_Slave;
 800025c:	2300      	movs	r3, #0
 800025e:	823b      	strh	r3, [r7, #16]
	SPI_PinCFG.P_IRQ_Callback = SPI_IRQ_callback;
 8000260:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <main+0xa0>)
 8000262:	61bb      	str	r3, [r7, #24]

#endif
	MCAL_SPI_Init(SPI1, &SPI_PinCFG);
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	4619      	mov	r1, r3
 8000268:	480b      	ldr	r0, [pc, #44]	; (8000298 <main+0xa4>)
 800026a:	f000 fa9b 	bl	80007a4 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_SET_PINs(SPI1);
 800026e:	480a      	ldr	r0, [pc, #40]	; (8000298 <main+0xa4>)
 8000270:	f000 fb4e 	bl	8000910 <MCAL_SPI_GPIO_SET_PINs>




		//=========================L3_Unit8===========================
		MCAL_USART_ReceiveData(USART1, &ch,enable);		MCAL_USART_SendData(USART1, &ch, enable);
 8000274:	2200      	movs	r2, #0
 8000276:	4909      	ldr	r1, [pc, #36]	; (800029c <main+0xa8>)
 8000278:	4805      	ldr	r0, [pc, #20]	; (8000290 <main+0x9c>)
 800027a:	f000 fd1f 	bl	8000cbc <MCAL_USART_ReceiveData>
 800027e:	2200      	movs	r2, #0
 8000280:	4906      	ldr	r1, [pc, #24]	; (800029c <main+0xa8>)
 8000282:	4803      	ldr	r0, [pc, #12]	; (8000290 <main+0x9c>)
 8000284:	f000 fcfe 	bl	8000c84 <MCAL_USART_SendData>
 8000288:	e7f4      	b.n	8000274 <main+0x80>
 800028a:	bf00      	nop
 800028c:	080001e9 	.word	0x080001e9
 8000290:	40013800 	.word	0x40013800
 8000294:	080001a5 	.word	0x080001a5
 8000298:	40013000 	.word	0x40013000
 800029c:	2000002c 	.word	0x2000002c

080002a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a0:	480d      	ldr	r0, [pc, #52]	; (80002d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a8:	480c      	ldr	r0, [pc, #48]	; (80002dc <LoopForever+0x6>)
  ldr r1, =_edata
 80002aa:	490d      	ldr	r1, [pc, #52]	; (80002e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ac:	4a0d      	ldr	r2, [pc, #52]	; (80002e4 <LoopForever+0xe>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b0:	e002      	b.n	80002b8 <LoopCopyDataInit>

080002b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b6:	3304      	adds	r3, #4

080002b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002bc:	d3f9      	bcc.n	80002b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002be:	4a0a      	ldr	r2, [pc, #40]	; (80002e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c0:	4c0a      	ldr	r4, [pc, #40]	; (80002ec <LoopForever+0x16>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c4:	e001      	b.n	80002ca <LoopFillZerobss>

080002c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c8:	3204      	adds	r2, #4

080002ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002cc:	d3fb      	bcc.n	80002c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ce:	f000 fda7 	bl	8000e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d2:	f7ff ff8f 	bl	80001f4 <main>

080002d6 <LoopForever>:

LoopForever:
    b LoopForever
 80002d6:	e7fe      	b.n	80002d6 <LoopForever>
  ldr   r0, =_estack
 80002d8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e4:	08000ea0 	.word	0x08000ea0
  ldr r2, =_sbss
 80002e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ec:	2000006c 	.word	0x2000006c

080002f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f0:	e7fe      	b.n	80002f0 <ADC1_2_IRQHandler>
	...

080002f4 <EXTI0_IRQHandler>:
* 					ISR Functions
* ===============================================
* */

void EXTI0_IRQHandler(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	//Clear pending register EXTI_PR by writing 1.
	EXTI->PR |= (1 << 0);
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <EXTI0_IRQHandler+0x1c>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <EXTI0_IRQHandler+0x1c>)
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	6153      	str	r3, [r2, #20]

	//Call IRQ.
	GP_IRQ_CallBack[0]();
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <EXTI0_IRQHandler+0x20>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4798      	blx	r3
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40010400 	.word	0x40010400
 8000314:	20000030 	.word	0x20000030

08000318 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	//Clear pending register EXTI_PR by writing 1.
	EXTI->PR |= (1 << 1);
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <EXTI1_IRQHandler+0x1c>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <EXTI1_IRQHandler+0x1c>)
 8000322:	f043 0302 	orr.w	r3, r3, #2
 8000326:	6153      	str	r3, [r2, #20]

	//Call IRQ.
	GP_IRQ_CallBack[1]();
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <EXTI1_IRQHandler+0x20>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	4798      	blx	r3
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40010400 	.word	0x40010400
 8000338:	20000030 	.word	0x20000030

0800033c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	//Clear pending register EXTI_PR by writing 1.
	EXTI->PR |= (1 << 2);
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <EXTI2_IRQHandler+0x1c>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	4a04      	ldr	r2, [pc, #16]	; (8000358 <EXTI2_IRQHandler+0x1c>)
 8000346:	f043 0304 	orr.w	r3, r3, #4
 800034a:	6153      	str	r3, [r2, #20]

	//Call IRQ.
	GP_IRQ_CallBack[2]();
 800034c:	4b03      	ldr	r3, [pc, #12]	; (800035c <EXTI2_IRQHandler+0x20>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	4798      	blx	r3
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010400 	.word	0x40010400
 800035c:	20000030 	.word	0x20000030

08000360 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	//Clear pending register EXTI_PR by writing 1.
	EXTI->PR |= (1 << 3);
 8000364:	4b05      	ldr	r3, [pc, #20]	; (800037c <EXTI3_IRQHandler+0x1c>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4a04      	ldr	r2, [pc, #16]	; (800037c <EXTI3_IRQHandler+0x1c>)
 800036a:	f043 0308 	orr.w	r3, r3, #8
 800036e:	6153      	str	r3, [r2, #20]

	//Call IRQ.
	GP_IRQ_CallBack[3]();
 8000370:	4b03      	ldr	r3, [pc, #12]	; (8000380 <EXTI3_IRQHandler+0x20>)
 8000372:	68db      	ldr	r3, [r3, #12]
 8000374:	4798      	blx	r3
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40010400 	.word	0x40010400
 8000380:	20000030 	.word	0x20000030

08000384 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	//Clear pending register EXTI_PR by writing 1.
	EXTI->PR |= (1 << 4);
 8000388:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <EXTI4_IRQHandler+0x1c>)
 800038a:	695b      	ldr	r3, [r3, #20]
 800038c:	4a04      	ldr	r2, [pc, #16]	; (80003a0 <EXTI4_IRQHandler+0x1c>)
 800038e:	f043 0310 	orr.w	r3, r3, #16
 8000392:	6153      	str	r3, [r2, #20]

	//Call IRQ.
	GP_IRQ_CallBack[4]();
 8000394:	4b03      	ldr	r3, [pc, #12]	; (80003a4 <EXTI4_IRQHandler+0x20>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4798      	blx	r3
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40010400 	.word	0x40010400
 80003a4:	20000030 	.word	0x20000030

080003a8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) { EXTI->PR |= (1 << 5) ; GP_IRQ_CallBack[5](); }
 80003ac:	4b26      	ldr	r3, [pc, #152]	; (8000448 <EXTI9_5_IRQHandler+0xa0>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	f003 0320 	and.w	r3, r3, #32
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d008      	beq.n	80003ca <EXTI9_5_IRQHandler+0x22>
 80003b8:	4b23      	ldr	r3, [pc, #140]	; (8000448 <EXTI9_5_IRQHandler+0xa0>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	4a22      	ldr	r2, [pc, #136]	; (8000448 <EXTI9_5_IRQHandler+0xa0>)
 80003be:	f043 0320 	orr.w	r3, r3, #32
 80003c2:	6153      	str	r3, [r2, #20]
 80003c4:	4b21      	ldr	r3, [pc, #132]	; (800044c <EXTI9_5_IRQHandler+0xa4>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR |= (1 << 6) ; GP_IRQ_CallBack[6](); }
 80003ca:	4b1f      	ldr	r3, [pc, #124]	; (8000448 <EXTI9_5_IRQHandler+0xa0>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d008      	beq.n	80003e8 <EXTI9_5_IRQHandler+0x40>
 80003d6:	4b1c      	ldr	r3, [pc, #112]	; (8000448 <EXTI9_5_IRQHandler+0xa0>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a1b      	ldr	r2, [pc, #108]	; (8000448 <EXTI9_5_IRQHandler+0xa0>)
 80003dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003e0:	6153      	str	r3, [r2, #20]
 80003e2:	4b1a      	ldr	r3, [pc, #104]	; (800044c <EXTI9_5_IRQHandler+0xa4>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR |= (1 << 7) ; GP_IRQ_CallBack[7](); }
 80003e8:	4b17      	ldr	r3, [pc, #92]	; (8000448 <EXTI9_5_IRQHandler+0xa0>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d008      	beq.n	8000406 <EXTI9_5_IRQHandler+0x5e>
 80003f4:	4b14      	ldr	r3, [pc, #80]	; (8000448 <EXTI9_5_IRQHandler+0xa0>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	4a13      	ldr	r2, [pc, #76]	; (8000448 <EXTI9_5_IRQHandler+0xa0>)
 80003fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003fe:	6153      	str	r3, [r2, #20]
 8000400:	4b12      	ldr	r3, [pc, #72]	; (800044c <EXTI9_5_IRQHandler+0xa4>)
 8000402:	69db      	ldr	r3, [r3, #28]
 8000404:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR |= (1 << 8) ; GP_IRQ_CallBack[8](); }
 8000406:	4b10      	ldr	r3, [pc, #64]	; (8000448 <EXTI9_5_IRQHandler+0xa0>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800040e:	2b00      	cmp	r3, #0
 8000410:	d008      	beq.n	8000424 <EXTI9_5_IRQHandler+0x7c>
 8000412:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <EXTI9_5_IRQHandler+0xa0>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4a0c      	ldr	r2, [pc, #48]	; (8000448 <EXTI9_5_IRQHandler+0xa0>)
 8000418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800041c:	6153      	str	r3, [r2, #20]
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <EXTI9_5_IRQHandler+0xa4>)
 8000420:	6a1b      	ldr	r3, [r3, #32]
 8000422:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR |= (1 << 9) ; GP_IRQ_CallBack[9](); }
 8000424:	4b08      	ldr	r3, [pc, #32]	; (8000448 <EXTI9_5_IRQHandler+0xa0>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800042c:	2b00      	cmp	r3, #0
 800042e:	d008      	beq.n	8000442 <EXTI9_5_IRQHandler+0x9a>
 8000430:	4b05      	ldr	r3, [pc, #20]	; (8000448 <EXTI9_5_IRQHandler+0xa0>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	4a04      	ldr	r2, [pc, #16]	; (8000448 <EXTI9_5_IRQHandler+0xa0>)
 8000436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800043a:	6153      	str	r3, [r2, #20]
 800043c:	4b03      	ldr	r3, [pc, #12]	; (800044c <EXTI9_5_IRQHandler+0xa4>)
 800043e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000440:	4798      	blx	r3
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40010400 	.word	0x40010400
 800044c:	20000030 	.word	0x20000030

08000450 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) { EXTI->PR |= (1 << 10) ; GP_IRQ_CallBack[10](); }
 8000454:	4b2d      	ldr	r3, [pc, #180]	; (800050c <EXTI15_10_IRQHandler+0xbc>)
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800045c:	2b00      	cmp	r3, #0
 800045e:	d008      	beq.n	8000472 <EXTI15_10_IRQHandler+0x22>
 8000460:	4b2a      	ldr	r3, [pc, #168]	; (800050c <EXTI15_10_IRQHandler+0xbc>)
 8000462:	695b      	ldr	r3, [r3, #20]
 8000464:	4a29      	ldr	r2, [pc, #164]	; (800050c <EXTI15_10_IRQHandler+0xbc>)
 8000466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800046a:	6153      	str	r3, [r2, #20]
 800046c:	4b28      	ldr	r3, [pc, #160]	; (8000510 <EXTI15_10_IRQHandler+0xc0>)
 800046e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000470:	4798      	blx	r3
	if(EXTI->PR & 1<<11) { EXTI->PR |= (1 << 11) ; GP_IRQ_CallBack[11](); }
 8000472:	4b26      	ldr	r3, [pc, #152]	; (800050c <EXTI15_10_IRQHandler+0xbc>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800047a:	2b00      	cmp	r3, #0
 800047c:	d008      	beq.n	8000490 <EXTI15_10_IRQHandler+0x40>
 800047e:	4b23      	ldr	r3, [pc, #140]	; (800050c <EXTI15_10_IRQHandler+0xbc>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a22      	ldr	r2, [pc, #136]	; (800050c <EXTI15_10_IRQHandler+0xbc>)
 8000484:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000488:	6153      	str	r3, [r2, #20]
 800048a:	4b21      	ldr	r3, [pc, #132]	; (8000510 <EXTI15_10_IRQHandler+0xc0>)
 800048c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800048e:	4798      	blx	r3
	if(EXTI->PR & 1<<12) { EXTI->PR |= (1 << 12) ; GP_IRQ_CallBack[12](); }
 8000490:	4b1e      	ldr	r3, [pc, #120]	; (800050c <EXTI15_10_IRQHandler+0xbc>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000498:	2b00      	cmp	r3, #0
 800049a:	d008      	beq.n	80004ae <EXTI15_10_IRQHandler+0x5e>
 800049c:	4b1b      	ldr	r3, [pc, #108]	; (800050c <EXTI15_10_IRQHandler+0xbc>)
 800049e:	695b      	ldr	r3, [r3, #20]
 80004a0:	4a1a      	ldr	r2, [pc, #104]	; (800050c <EXTI15_10_IRQHandler+0xbc>)
 80004a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004a6:	6153      	str	r3, [r2, #20]
 80004a8:	4b19      	ldr	r3, [pc, #100]	; (8000510 <EXTI15_10_IRQHandler+0xc0>)
 80004aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ac:	4798      	blx	r3
	if(EXTI->PR & 1<<13) { EXTI->PR |= (1 << 13) ; GP_IRQ_CallBack[13](); }
 80004ae:	4b17      	ldr	r3, [pc, #92]	; (800050c <EXTI15_10_IRQHandler+0xbc>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d008      	beq.n	80004cc <EXTI15_10_IRQHandler+0x7c>
 80004ba:	4b14      	ldr	r3, [pc, #80]	; (800050c <EXTI15_10_IRQHandler+0xbc>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a13      	ldr	r2, [pc, #76]	; (800050c <EXTI15_10_IRQHandler+0xbc>)
 80004c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004c4:	6153      	str	r3, [r2, #20]
 80004c6:	4b12      	ldr	r3, [pc, #72]	; (8000510 <EXTI15_10_IRQHandler+0xc0>)
 80004c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ca:	4798      	blx	r3
	if(EXTI->PR & 1<<14) { EXTI->PR |= (1 << 14) ; GP_IRQ_CallBack[14](); }
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <EXTI15_10_IRQHandler+0xbc>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d008      	beq.n	80004ea <EXTI15_10_IRQHandler+0x9a>
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <EXTI15_10_IRQHandler+0xbc>)
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	4a0b      	ldr	r2, [pc, #44]	; (800050c <EXTI15_10_IRQHandler+0xbc>)
 80004de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004e2:	6153      	str	r3, [r2, #20]
 80004e4:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <EXTI15_10_IRQHandler+0xc0>)
 80004e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004e8:	4798      	blx	r3
	if(EXTI->PR & 1<<15) { EXTI->PR |= (1 << 15) ; GP_IRQ_CallBack[15](); }
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <EXTI15_10_IRQHandler+0xbc>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d008      	beq.n	8000508 <EXTI15_10_IRQHandler+0xb8>
 80004f6:	4b05      	ldr	r3, [pc, #20]	; (800050c <EXTI15_10_IRQHandler+0xbc>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	4a04      	ldr	r2, [pc, #16]	; (800050c <EXTI15_10_IRQHandler+0xbc>)
 80004fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000500:	6153      	str	r3, [r2, #20]
 8000502:	4b03      	ldr	r3, [pc, #12]	; (8000510 <EXTI15_10_IRQHandler+0xc0>)
 8000504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000506:	4798      	blx	r3
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40010400 	.word	0x40010400
 8000510:	20000030 	.word	0x20000030

08000514 <GET_CRLH_Position>:

#include "GPIO_Driver_stm32f103c6.h"

//support fun to get position of bit to can read or write on it.
uint8_t GET_CRLH_Position (uint16_t PinNumber)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	2b80      	cmp	r3, #128	; 0x80
 8000522:	d042      	beq.n	80005aa <GET_CRLH_Position+0x96>
 8000524:	2b80      	cmp	r3, #128	; 0x80
 8000526:	dc11      	bgt.n	800054c <GET_CRLH_Position+0x38>
 8000528:	2b08      	cmp	r3, #8
 800052a:	d036      	beq.n	800059a <GET_CRLH_Position+0x86>
 800052c:	2b08      	cmp	r3, #8
 800052e:	dc06      	bgt.n	800053e <GET_CRLH_Position+0x2a>
 8000530:	2b02      	cmp	r3, #2
 8000532:	d02e      	beq.n	8000592 <GET_CRLH_Position+0x7e>
 8000534:	2b04      	cmp	r3, #4
 8000536:	d02e      	beq.n	8000596 <GET_CRLH_Position+0x82>
 8000538:	2b01      	cmp	r3, #1
 800053a:	d028      	beq.n	800058e <GET_CRLH_Position+0x7a>
 800053c:	e047      	b.n	80005ce <GET_CRLH_Position+0xba>
 800053e:	2b20      	cmp	r3, #32
 8000540:	d02f      	beq.n	80005a2 <GET_CRLH_Position+0x8e>
 8000542:	2b40      	cmp	r3, #64	; 0x40
 8000544:	d02f      	beq.n	80005a6 <GET_CRLH_Position+0x92>
 8000546:	2b10      	cmp	r3, #16
 8000548:	d029      	beq.n	800059e <GET_CRLH_Position+0x8a>
 800054a:	e040      	b.n	80005ce <GET_CRLH_Position+0xba>
 800054c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000550:	d033      	beq.n	80005ba <GET_CRLH_Position+0xa6>
 8000552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000556:	dc09      	bgt.n	800056c <GET_CRLH_Position+0x58>
 8000558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800055c:	d029      	beq.n	80005b2 <GET_CRLH_Position+0x9e>
 800055e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000562:	d028      	beq.n	80005b6 <GET_CRLH_Position+0xa2>
 8000564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000568:	d021      	beq.n	80005ae <GET_CRLH_Position+0x9a>
 800056a:	e030      	b.n	80005ce <GET_CRLH_Position+0xba>
 800056c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000570:	d027      	beq.n	80005c2 <GET_CRLH_Position+0xae>
 8000572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000576:	dc03      	bgt.n	8000580 <GET_CRLH_Position+0x6c>
 8000578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800057c:	d01f      	beq.n	80005be <GET_CRLH_Position+0xaa>
 800057e:	e026      	b.n	80005ce <GET_CRLH_Position+0xba>
 8000580:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000584:	d01f      	beq.n	80005c6 <GET_CRLH_Position+0xb2>
 8000586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800058a:	d01e      	beq.n	80005ca <GET_CRLH_Position+0xb6>
 800058c:	e01f      	b.n	80005ce <GET_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 800058e:	2300      	movs	r3, #0
 8000590:	e01e      	b.n	80005d0 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000592:	2304      	movs	r3, #4
 8000594:	e01c      	b.n	80005d0 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000596:	2308      	movs	r3, #8
 8000598:	e01a      	b.n	80005d0 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 800059a:	230c      	movs	r3, #12
 800059c:	e018      	b.n	80005d0 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 800059e:	2310      	movs	r3, #16
 80005a0:	e016      	b.n	80005d0 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 80005a2:	2314      	movs	r3, #20
 80005a4:	e014      	b.n	80005d0 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 80005a6:	2318      	movs	r3, #24
 80005a8:	e012      	b.n	80005d0 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 80005aa:	231c      	movs	r3, #28
 80005ac:	e010      	b.n	80005d0 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	e00e      	b.n	80005d0 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 80005b2:	2304      	movs	r3, #4
 80005b4:	e00c      	b.n	80005d0 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 80005b6:	2308      	movs	r3, #8
 80005b8:	e00a      	b.n	80005d0 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 80005ba:	230c      	movs	r3, #12
 80005bc:	e008      	b.n	80005d0 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 80005be:	2310      	movs	r3, #16
 80005c0:	e006      	b.n	80005d0 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 80005c2:	2314      	movs	r3, #20
 80005c4:	e004      	b.n	80005d0 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 80005c6:	2318      	movs	r3, #24
 80005c8:	e002      	b.n	80005d0 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 80005ca:	231c      	movs	r3, #28
 80005cc:	e000      	b.n	80005d0 <GET_CRLH_Position+0xbc>
		break;
	}
	return 0;
 80005ce:	2300      	movs	r3, #0
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr

080005da <MCAL_GPIO_Init>:
 * @param [in]   - PinConfig pointer to GPIO_PinConfig_t structure that contain the configuration information for specific Pin.
 * @retval       - None
 * Note          - None
 */
void MCAL_GPIO_Init (GPIO_REG_typedef * GPIOx , GPIO_PinConfig_t *PinConfig)
{
 80005da:	b590      	push	{r4, r7, lr}
 80005dc:	b085      	sub	sp, #20
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
 80005e2:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) from 0 --> 7
	//Port configuration register high (GPIOx_CRH) from 8 --> 15

	volatile uint32_t* ConfigRegister = NULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
	uint8_t PIN_config = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	72fb      	strb	r3, [r7, #11]

	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8 ? &GPIOx->CRL : &GPIOx->CRH);
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	2bff      	cmp	r3, #255	; 0xff
 80005f2:	d801      	bhi.n	80005f8 <MCAL_GPIO_Init+0x1e>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	e001      	b.n	80005fc <MCAL_GPIO_Init+0x22>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	3304      	adds	r3, #4
 80005fc:	60fb      	str	r3, [r7, #12]

	//Clear CNF & MODE for specific bit.
	(*ConfigRegister) &= ~(0xF << GET_CRLH_Position(PinConfig->GPIO_PinNumber));
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff ff86 	bl	8000514 <GET_CRLH_Position>
 8000608:	4603      	mov	r3, r0
 800060a:	461a      	mov	r2, r3
 800060c:	230f      	movs	r3, #15
 800060e:	4093      	lsls	r3, r2
 8000610:	43da      	mvns	r2, r3
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	401a      	ands	r2, r3
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	601a      	str	r2, [r3, #0]

	//if pin is output.
	if((PinConfig->GPIO_Mode == GPIO_Mode_Output_Alt_Flo_OD) || (PinConfig->GPIO_Mode == GPIO_Mode_Output_Alt_Flo_PP) ||
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	789b      	ldrb	r3, [r3, #2]
 8000620:	2b07      	cmp	r3, #7
 8000622:	d00b      	beq.n	800063c <MCAL_GPIO_Init+0x62>
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	789b      	ldrb	r3, [r3, #2]
 8000628:	2b06      	cmp	r3, #6
 800062a:	d007      	beq.n	800063c <MCAL_GPIO_Init+0x62>
	   (PinConfig->GPIO_Mode == GPIO_Mode_Output_Open_Drain) || (PinConfig->GPIO_Mode == GPIO_Mode_Output_Push_Pull))
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	789b      	ldrb	r3, [r3, #2]
	if((PinConfig->GPIO_Mode == GPIO_Mode_Output_Alt_Flo_OD) || (PinConfig->GPIO_Mode == GPIO_Mode_Output_Alt_Flo_PP) ||
 8000630:	2b05      	cmp	r3, #5
 8000632:	d003      	beq.n	800063c <MCAL_GPIO_Init+0x62>
	   (PinConfig->GPIO_Mode == GPIO_Mode_Output_Open_Drain) || (PinConfig->GPIO_Mode == GPIO_Mode_Output_Push_Pull))
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	789b      	ldrb	r3, [r3, #2]
 8000638:	2b04      	cmp	r3, #4
 800063a:	d11c      	bne.n	8000676 <MCAL_GPIO_Init+0x9c>
	{
		//Set CNF & MODE for specific bit.
		PIN_config = (((PinConfig->GPIO_Mode - 4) << 2) | (PinConfig->GPIO_Output_Speed & 0x0F)) ;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	789b      	ldrb	r3, [r3, #2]
 8000640:	3b04      	subs	r3, #4
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	b25a      	sxtb	r2, r3
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	78db      	ldrb	r3, [r3, #3]
 800064a:	b25b      	sxtb	r3, r3
 800064c:	f003 030f 	and.w	r3, r3, #15
 8000650:	b25b      	sxtb	r3, r3
 8000652:	4313      	orrs	r3, r2
 8000654:	b25b      	sxtb	r3, r3
 8000656:	72fb      	strb	r3, [r7, #11]
		//Write on RCL & RCH.
		(*ConfigRegister) |=  ((PIN_config) << GET_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000658:	7afc      	ldrb	r4, [r7, #11]
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff58 	bl	8000514 <GET_CRLH_Position>
 8000664:	4603      	mov	r3, r0
 8000666:	fa04 f203 	lsl.w	r2, r4, r3
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	431a      	orrs	r2, r3
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	e038      	b.n	80006e8 <MCAL_GPIO_Init+0x10e>
	}
	//if pin is input.
	else
	{
		if((PinConfig->GPIO_Mode == GPIO_Mode_Input_Floating) || (PinConfig->GPIO_Mode == GPIO_Mode_Analog) )
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	789b      	ldrb	r3, [r3, #2]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d003      	beq.n	8000686 <MCAL_GPIO_Init+0xac>
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	789b      	ldrb	r3, [r3, #2]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d112      	bne.n	80006ac <MCAL_GPIO_Init+0xd2>
		{
			//Set CNF & MODE for specific bit.
			PIN_config = (((PinConfig->GPIO_Mode) << 2) | (0x0 & 0x0F)) ;
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	789b      	ldrb	r3, [r3, #2]
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	72fb      	strb	r3, [r7, #11]
			//Write on RCL & RCH.
			(*ConfigRegister) |=  ((PIN_config) << GET_CRLH_Position(PinConfig->GPIO_PinNumber));
 800068e:	7afc      	ldrb	r4, [r7, #11]
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ff3d 	bl	8000514 <GET_CRLH_Position>
 800069a:	4603      	mov	r3, r0
 800069c:	fa04 f203 	lsl.w	r2, r4, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	431a      	orrs	r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	e01d      	b.n	80006e8 <MCAL_GPIO_Init+0x10e>
		}
		else if (PinConfig->GPIO_Mode == GPIO_Mode_ALT_FLO_Input) //consider as it floating
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	789b      	ldrb	r3, [r3, #2]
 80006b0:	2b08      	cmp	r3, #8
 80006b2:	d102      	bne.n	80006ba <MCAL_GPIO_Init+0xe0>
		{
			PIN_config = (((GPIO_Mode_ALT_FLO_Input) << 2) | (0x0 & 0x0F));
 80006b4:	2320      	movs	r3, #32
 80006b6:	72fb      	strb	r3, [r7, #11]
			}
		}


	}
}
 80006b8:	e016      	b.n	80006e8 <MCAL_GPIO_Init+0x10e>
			PIN_config = (((GPIO_Mode_Input_Pull_Up) << 2) | (0x0 & 0x0F));
 80006ba:	2308      	movs	r3, #8
 80006bc:	72fb      	strb	r3, [r7, #11]
			if(PinConfig->GPIO_Mode == GPIO_Mode_Input_Pull_Up)
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	789b      	ldrb	r3, [r3, #2]
 80006c2:	2b02      	cmp	r3, #2
 80006c4:	d107      	bne.n	80006d6 <MCAL_GPIO_Init+0xfc>
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	683a      	ldr	r2, [r7, #0]
 80006cc:	8812      	ldrh	r2, [r2, #0]
 80006ce:	431a      	orrs	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	60da      	str	r2, [r3, #12]
}
 80006d4:	e008      	b.n	80006e8 <MCAL_GPIO_Init+0x10e>
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	68db      	ldr	r3, [r3, #12]
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	8812      	ldrh	r2, [r2, #0]
 80006de:	43d2      	mvns	r2, r2
 80006e0:	401a      	ands	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	60da      	str	r2, [r3, #12]
}
 80006e6:	e7ff      	b.n	80006e8 <MCAL_GPIO_Init+0x10e>
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd90      	pop	{r4, r7, pc}

080006f0 <MCAL_RCC_Get_System_CLK_Freq>:
 1110: SYSCLK divided by 256
 1111: SYSCLK divided by 512 */
const uint8_t AHBprescTable[16U] = {0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

uint32_t MCAL_RCC_Get_System_CLK_Freq(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
	00: HSI oscillator used as system clock
	01: HSE oscillator used as system clock
	10: PLL used as system clock
	11: Not applicable */

	switch((RCC->CFGR >> 2) & 0b11)
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MCAL_RCC_Get_System_CLK_Freq+0x30>)
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	089b      	lsrs	r3, r3, #2
 80006fa:	f003 0303 	and.w	r3, r3, #3
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d006      	beq.n	8000710 <MCAL_RCC_Get_System_CLK_Freq+0x20>
 8000702:	2b01      	cmp	r3, #1
 8000704:	d302      	bcc.n	800070c <MCAL_RCC_Get_System_CLK_Freq+0x1c>
 8000706:	2b02      	cmp	r3, #2
 8000708:	d004      	beq.n	8000714 <MCAL_RCC_Get_System_CLK_Freq+0x24>
 800070a:	e005      	b.n	8000718 <MCAL_RCC_Get_System_CLK_Freq+0x28>
	{
	case 0:
		return HSI_system_clock;
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <MCAL_RCC_Get_System_CLK_Freq+0x34>)
 800070e:	e003      	b.n	8000718 <MCAL_RCC_Get_System_CLK_Freq+0x28>
		break;
	case 1:
		return HSE_system_clock;
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <MCAL_RCC_Get_System_CLK_Freq+0x38>)
 8000712:	e001      	b.n	8000718 <MCAL_RCC_Get_System_CLK_Freq+0x28>
		break;
	case 2:
		return 16000000;
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <MCAL_RCC_Get_System_CLK_Freq+0x38>)
 8000716:	e7ff      	b.n	8000718 <MCAL_RCC_Get_System_CLK_Freq+0x28>
		break;
	}

}
 8000718:	4618      	mov	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	40021000 	.word	0x40021000
 8000724:	007a1200 	.word	0x007a1200
 8000728:	00f42400 	.word	0x00f42400

0800072c <MCAL_RCC_Get_HCLK_Freq>:

uint32_t MCAL_RCC_Get_HCLK_Freq(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return (MCAL_RCC_Get_System_CLK_Freq() >> AHBprescTable[(RCC->CFGR >> 4) & 0xF]);
 8000730:	f7ff ffde 	bl	80006f0 <MCAL_RCC_Get_System_CLK_Freq>
 8000734:	4601      	mov	r1, r0
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <MCAL_RCC_Get_HCLK_Freq+0x20>)
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	091b      	lsrs	r3, r3, #4
 800073c:	f003 030f 	and.w	r3, r3, #15
 8000740:	4a03      	ldr	r2, [pc, #12]	; (8000750 <MCAL_RCC_Get_HCLK_Freq+0x24>)
 8000742:	5cd3      	ldrb	r3, [r2, r3]
 8000744:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000748:	4618      	mov	r0, r3
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40021000 	.word	0x40021000
 8000750:	08000e88 	.word	0x08000e88

08000754 <MCAL_RCC_Get_PCLK1_Freq>:

uint32_t MCAL_RCC_Get_PCLK1_Freq(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return (MCAL_RCC_Get_HCLK_Freq() >> APBPrescTable[(RCC->CFGR >> 8) & 0b111]);
 8000758:	f7ff ffe8 	bl	800072c <MCAL_RCC_Get_HCLK_Freq>
 800075c:	4601      	mov	r1, r0
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <MCAL_RCC_Get_PCLK1_Freq+0x20>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	0a1b      	lsrs	r3, r3, #8
 8000764:	f003 0307 	and.w	r3, r3, #7
 8000768:	4a03      	ldr	r2, [pc, #12]	; (8000778 <MCAL_RCC_Get_PCLK1_Freq+0x24>)
 800076a:	5cd3      	ldrb	r3, [r2, r3]
 800076c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000770:	4618      	mov	r0, r3
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40021000 	.word	0x40021000
 8000778:	08000e80 	.word	0x08000e80

0800077c <MCAL_RCC_Get_PCLK2_Freq>:

uint32_t MCAL_RCC_Get_PCLK2_Freq(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return (MCAL_RCC_Get_HCLK_Freq() >> APBPrescTable[(RCC->CFGR >> 11) & 0b111]);
 8000780:	f7ff ffd4 	bl	800072c <MCAL_RCC_Get_HCLK_Freq>
 8000784:	4601      	mov	r1, r0
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <MCAL_RCC_Get_PCLK2_Freq+0x20>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	0adb      	lsrs	r3, r3, #11
 800078c:	f003 0307 	and.w	r3, r3, #7
 8000790:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <MCAL_RCC_Get_PCLK2_Freq+0x24>)
 8000792:	5cd3      	ldrb	r3, [r2, r3]
 8000794:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000798:	4618      	mov	r0, r3
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40021000 	.word	0x40021000
 80007a0:	08000e80 	.word	0x08000e80

080007a4 <MCAL_SPI_Init>:
 * @retval       - None
 * Note          - None
 */

void MCAL_SPI_Init(SPI_REG_typedef *SPIx, SPI_PinConfig_t* SPI_config)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
	uint16_t tmp_CR1 = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	81fb      	strh	r3, [r7, #14]
	uint16_t tmp_CR2 = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	81bb      	strh	r3, [r7, #12]

	if(SPIx == SPI1)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a3b      	ldr	r2, [pc, #236]	; (80008a8 <MCAL_SPI_Init+0x104>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d109      	bne.n	80007d2 <MCAL_SPI_Init+0x2e>
	{
		G_SPI_config[SPI1_Index] = SPI_config;
 80007be:	4a3b      	ldr	r2, [pc, #236]	; (80008ac <MCAL_SPI_Init+0x108>)
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	6013      	str	r3, [r2, #0]
		RCC_SPI1_Clock_Enable;
 80007c4:	4b3a      	ldr	r3, [pc, #232]	; (80008b0 <MCAL_SPI_Init+0x10c>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a39      	ldr	r2, [pc, #228]	; (80008b0 <MCAL_SPI_Init+0x10c>)
 80007ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	e00c      	b.n	80007ec <MCAL_SPI_Init+0x48>

	}else if (SPIx == SPI2)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a37      	ldr	r2, [pc, #220]	; (80008b4 <MCAL_SPI_Init+0x110>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d108      	bne.n	80007ec <MCAL_SPI_Init+0x48>
	{
		G_SPI_config[SPI2_Index] = SPI_config;
 80007da:	4a34      	ldr	r2, [pc, #208]	; (80008ac <MCAL_SPI_Init+0x108>)
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	6053      	str	r3, [r2, #4]
		RCC_SPI2_Clock_Enable;
 80007e0:	4b33      	ldr	r3, [pc, #204]	; (80008b0 <MCAL_SPI_Init+0x10c>)
 80007e2:	69db      	ldr	r3, [r3, #28]
 80007e4:	4a32      	ldr	r2, [pc, #200]	; (80008b0 <MCAL_SPI_Init+0x10c>)
 80007e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ea:	61d3      	str	r3, [r2, #28]
	}

	// Enable SPI >> Bit 6 SPE: SPI enable
	tmp_CR1 = (0x1U << 6);
 80007ec:	2340      	movs	r3, #64	; 0x40
 80007ee:	81fb      	strh	r3, [r7, #14]

	// Mode operation Master or Slave
	tmp_CR1 |= SPI_config->Device_Mode;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	881a      	ldrh	r2, [r3, #0]
 80007f4:	89fb      	ldrh	r3, [r7, #14]
 80007f6:	4313      	orrs	r3, r2
 80007f8:	81fb      	strh	r3, [r7, #14]

	// SPI communication mode
	tmp_CR1 |= SPI_config->Communication_Mode;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	885a      	ldrh	r2, [r3, #2]
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	4313      	orrs	r3, r2
 8000802:	81fb      	strh	r3, [r7, #14]

	// SPI frame format
	tmp_CR1 |= SPI_config->Frame_Format;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	889a      	ldrh	r2, [r3, #4]
 8000808:	89fb      	ldrh	r3, [r7, #14]
 800080a:	4313      	orrs	r3, r2
 800080c:	81fb      	strh	r3, [r7, #14]

	// SPI data size
	tmp_CR1 |= SPI_config->Data_Size;
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	88da      	ldrh	r2, [r3, #6]
 8000812:	89fb      	ldrh	r3, [r7, #14]
 8000814:	4313      	orrs	r3, r2
 8000816:	81fb      	strh	r3, [r7, #14]

	// SPI CLK Polarity
	tmp_CR1 |= SPI_config->CLK_Polarity;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	891a      	ldrh	r2, [r3, #8]
 800081c:	89fb      	ldrh	r3, [r7, #14]
 800081e:	4313      	orrs	r3, r2
 8000820:	81fb      	strh	r3, [r7, #14]

	// SPI CLK Phase
	tmp_CR1 |= SPI_config->CLK_Phase;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	895a      	ldrh	r2, [r3, #10]
 8000826:	89fb      	ldrh	r3, [r7, #14]
 8000828:	4313      	orrs	r3, r2
 800082a:	81fb      	strh	r3, [r7, #14]

	// NSS
	if(SPI_config->NSS == SPI_NSS_HW_Master_ss_output_Enable )
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	899b      	ldrh	r3, [r3, #12]
 8000830:	2b04      	cmp	r3, #4
 8000832:	d105      	bne.n	8000840 <MCAL_SPI_Init+0x9c>
	{
		tmp_CR2 |= SPI_config->NSS;
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	899a      	ldrh	r2, [r3, #12]
 8000838:	89bb      	ldrh	r3, [r7, #12]
 800083a:	4313      	orrs	r3, r2
 800083c:	81bb      	strh	r3, [r7, #12]
 800083e:	e004      	b.n	800084a <MCAL_SPI_Init+0xa6>
	}else if(SPI_config->NSS == SPI_NSS_HW_Master_ss_output_Disable)
	{
		tmp_CR2 &= SPI_config->NSS;
	}else
	{
		tmp_CR1 |= SPI_config->NSS;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	899a      	ldrh	r2, [r3, #12]
 8000844:	89fb      	ldrh	r3, [r7, #14]
 8000846:	4313      	orrs	r3, r2
 8000848:	81fb      	strh	r3, [r7, #14]
	}

	//SPI_Baud rate
	tmp_CR1 |= SPI_config->SPI_Clock_Frequency;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	89da      	ldrh	r2, [r3, #14]
 800084e:	89fb      	ldrh	r3, [r7, #14]
 8000850:	4313      	orrs	r3, r2
 8000852:	81fb      	strh	r3, [r7, #14]

	// Interrupt
	if(SPI_config->IRQ_Enable != SPI_IRQ_Enable_NONE)
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	8a1b      	ldrh	r3, [r3, #16]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d019      	beq.n	8000890 <MCAL_SPI_Init+0xec>
	{
		tmp_CR2 |= SPI_config->IRQ_Enable;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	8a1a      	ldrh	r2, [r3, #16]
 8000860:	89bb      	ldrh	r3, [r7, #12]
 8000862:	4313      	orrs	r3, r2
 8000864:	81bb      	strh	r3, [r7, #12]

		if(SPIx == SPI1)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <MCAL_SPI_Init+0x104>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d106      	bne.n	800087c <MCAL_SPI_Init+0xd8>
		{
			NVIC_IRQ35_SPI1_Enable;
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MCAL_SPI_Init+0x114>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <MCAL_SPI_Init+0x114>)
 8000874:	f043 0308 	orr.w	r3, r3, #8
 8000878:	6013      	str	r3, [r2, #0]
 800087a:	e009      	b.n	8000890 <MCAL_SPI_Init+0xec>
		}else if(SPIx == SPI2)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a0d      	ldr	r2, [pc, #52]	; (80008b4 <MCAL_SPI_Init+0x110>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d105      	bne.n	8000890 <MCAL_SPI_Init+0xec>
		{
			NVIC_IRQ36_SPI2_Enable;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MCAL_SPI_Init+0x114>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <MCAL_SPI_Init+0x114>)
 800088a:	f043 0310 	orr.w	r3, r3, #16
 800088e:	6013      	str	r3, [r2, #0]
		}
	}

	SPIx->CR1 = tmp_CR1;
 8000890:	89fa      	ldrh	r2, [r7, #14]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = tmp_CR2;
 8000896:	89ba      	ldrh	r2, [r7, #12]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	605a      	str	r2, [r3, #4]

}
 800089c:	bf00      	nop
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40013000 	.word	0x40013000
 80008ac:	2000001c 	.word	0x2000001c
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40003800 	.word	0x40003800
 80008b8:	e000e104 	.word	0xe000e104

080008bc <MCAL_SPI_TX_RX>:
 * @param [in]   - Polling enable or not
 * @retval       - None
 * Note          - None
 */
void MCAL_SPI_TX_RX(SPI_REG_typedef *SPIx, uint16_t *TX_Buffer, enum Polling_Mech pollingEN)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	4613      	mov	r3, r2
 80008c8:	71fb      	strb	r3, [r7, #7]
	if(pollingEN == Enable)
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d106      	bne.n	80008de <MCAL_SPI_TX_RX+0x22>
		while(!(SPIx->SR & SPI_SR_TXE));
 80008d0:	bf00      	nop
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d0f9      	beq.n	80008d2 <MCAL_SPI_TX_RX+0x16>
	SPIx->DR = *TX_Buffer;
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	461a      	mov	r2, r3
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	60da      	str	r2, [r3, #12]

	if(pollingEN == Enable)
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d106      	bne.n	80008fc <MCAL_SPI_TX_RX+0x40>
		while(!(SPIx->SR & SPI_SR_RXNE));
 80008ee:	bf00      	nop
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d0f9      	beq.n	80008f0 <MCAL_SPI_TX_RX+0x34>
	*TX_Buffer = SPIx->DR;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	b29a      	uxth	r2, r3
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	801a      	strh	r2, [r3, #0]
}
 8000906:	bf00      	nop
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <MCAL_SPI_GPIO_SET_PINs>:
 * @brief        - Initialization GPIO pins
 * @param [in]   - SPIx: where x is (1,2)
 * Note          - None
 */
void MCAL_SPI_GPIO_SET_PINs(SPI_REG_typedef *SPIx)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
void MCAL_SPI_GPIO_SET_PINs(SPI_REG_typedef *SPIx)
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	60bb      	str	r3, [r7, #8]
	GPIO_PinConfig_t PinCFG;

	if(SPIx == SPI1)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a72      	ldr	r2, [pc, #456]	; (8000aec <MCAL_SPI_GPIO_SET_PINs+0x1dc>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d169      	bne.n	80009fa <MCAL_SPI_GPIO_SET_PINs+0xea>
		// PA4 <<>> NSS
		// PA5 <<>> SCK
		// PA6 <<>> MISO
		// PA7 <<>> MOSI

		if(G_SPI_config[SPI1_Index]->Device_Mode == SPI_Device_Mode_Master)
 8000926:	4b72      	ldr	r3, [pc, #456]	; (8000af0 <MCAL_SPI_GPIO_SET_PINs+0x1e0>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	2b04      	cmp	r3, #4
 800092e:	d134      	bne.n	800099a <MCAL_SPI_GPIO_SET_PINs+0x8a>
		{
			// PA4 <<>> NSS
			switch(G_SPI_config[SPI1_Index]->NSS)
 8000930:	4b6f      	ldr	r3, [pc, #444]	; (8000af0 <MCAL_SPI_GPIO_SET_PINs+0x1e0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	899b      	ldrh	r3, [r3, #12]
 8000936:	2b04      	cmp	r3, #4
 8000938:	d10c      	bne.n	8000954 <MCAL_SPI_GPIO_SET_PINs+0x44>
				PinCFG.GPIO_Mode = GPIO_Mode_Input_Floating;
				MCAL_GPIO_Init(GPIOA, &PinCFG);
				break;

			case SPI_NSS_HW_Master_ss_output_Enable:
				PinCFG.GPIO_PinNumber = GPIO_PIN_4;
 800093a:	2310      	movs	r3, #16
 800093c:	81bb      	strh	r3, [r7, #12]
				PinCFG.GPIO_Mode = GPIO_Mode_Output_Alt_Flo_PP;
 800093e:	2306      	movs	r3, #6
 8000940:	73bb      	strb	r3, [r7, #14]
				PinCFG.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000942:	2301      	movs	r3, #1
 8000944:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCFG);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	4619      	mov	r1, r3
 800094c:	4869      	ldr	r0, [pc, #420]	; (8000af4 <MCAL_SPI_GPIO_SET_PINs+0x1e4>)
 800094e:	f7ff fe44 	bl	80005da <MCAL_GPIO_Init>
				break;
 8000952:	bf00      	nop
			}

			// PA5 <<>> SCK
			PinCFG.GPIO_PinNumber = GPIO_PIN_5;
 8000954:	2320      	movs	r3, #32
 8000956:	81bb      	strh	r3, [r7, #12]
			PinCFG.GPIO_Mode = GPIO_Mode_Output_Alt_Flo_PP;
 8000958:	2306      	movs	r3, #6
 800095a:	73bb      	strb	r3, [r7, #14]
			PinCFG.GPIO_Output_Speed = GPIO_Speed_10MHz;
 800095c:	2301      	movs	r3, #1
 800095e:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCFG);
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	4619      	mov	r1, r3
 8000966:	4863      	ldr	r0, [pc, #396]	; (8000af4 <MCAL_SPI_GPIO_SET_PINs+0x1e4>)
 8000968:	f7ff fe37 	bl	80005da <MCAL_GPIO_Init>

			// PA6 <<>> MISO >> full duplex.
			PinCFG.GPIO_PinNumber = GPIO_PIN_6;
 800096c:	2340      	movs	r3, #64	; 0x40
 800096e:	81bb      	strh	r3, [r7, #12]
			PinCFG.GPIO_Mode = GPIO_Mode_Input_Floating;
 8000970:	2301      	movs	r3, #1
 8000972:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCFG);
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	4619      	mov	r1, r3
 800097a:	485e      	ldr	r0, [pc, #376]	; (8000af4 <MCAL_SPI_GPIO_SET_PINs+0x1e4>)
 800097c:	f7ff fe2d 	bl	80005da <MCAL_GPIO_Init>

			// PA7 <<>> MOSI
			PinCFG.GPIO_PinNumber = GPIO_PIN_7;
 8000980:	2380      	movs	r3, #128	; 0x80
 8000982:	81bb      	strh	r3, [r7, #12]
			PinCFG.GPIO_Mode = GPIO_Mode_Output_Alt_Flo_PP;
 8000984:	2306      	movs	r3, #6
 8000986:	73bb      	strb	r3, [r7, #14]
			PinCFG.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000988:	2301      	movs	r3, #1
 800098a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCFG);
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	4619      	mov	r1, r3
 8000992:	4858      	ldr	r0, [pc, #352]	; (8000af4 <MCAL_SPI_GPIO_SET_PINs+0x1e4>)
 8000994:	f7ff fe21 	bl	80005da <MCAL_GPIO_Init>
	irq_SCR.RXNE = ((SPI2->SR & (1<<0)) >> 0);
	irq_SCR.ERRI = ((SPI2->SR & (1<<4)) >> 4);

	G_SPI_config[SPI2_Index]->P_IRQ_Callback(irq_SCR);
}
}
 8000998:	e0a4      	b.n	8000ae4 <MCAL_SPI_GPIO_SET_PINs+0x1d4>
			if(G_SPI_config[SPI1_Index]->NSS == SPI_NSS_HW_Slave)
 800099a:	4b55      	ldr	r3, [pc, #340]	; (8000af0 <MCAL_SPI_GPIO_SET_PINs+0x1e0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	899b      	ldrh	r3, [r3, #12]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d109      	bne.n	80009b8 <MCAL_SPI_GPIO_SET_PINs+0xa8>
				PinCFG.GPIO_PinNumber = GPIO_PIN_4;
 80009a4:	2310      	movs	r3, #16
 80009a6:	81bb      	strh	r3, [r7, #12]
				PinCFG.GPIO_Mode = GPIO_Mode_Input_Floating;
 80009a8:	2301      	movs	r3, #1
 80009aa:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCFG);
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	4619      	mov	r1, r3
 80009b2:	4850      	ldr	r0, [pc, #320]	; (8000af4 <MCAL_SPI_GPIO_SET_PINs+0x1e4>)
 80009b4:	f7ff fe11 	bl	80005da <MCAL_GPIO_Init>
			PinCFG.GPIO_PinNumber = GPIO_PIN_5;
 80009b8:	2320      	movs	r3, #32
 80009ba:	81bb      	strh	r3, [r7, #12]
			PinCFG.GPIO_Mode = GPIO_Mode_Input_Floating;
 80009bc:	2301      	movs	r3, #1
 80009be:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCFG);
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4619      	mov	r1, r3
 80009c6:	484b      	ldr	r0, [pc, #300]	; (8000af4 <MCAL_SPI_GPIO_SET_PINs+0x1e4>)
 80009c8:	f7ff fe07 	bl	80005da <MCAL_GPIO_Init>
			PinCFG.GPIO_PinNumber = GPIO_PIN_6;
 80009cc:	2340      	movs	r3, #64	; 0x40
 80009ce:	81bb      	strh	r3, [r7, #12]
			PinCFG.GPIO_Mode = GPIO_Mode_Output_Alt_Flo_PP;
 80009d0:	2306      	movs	r3, #6
 80009d2:	73bb      	strb	r3, [r7, #14]
			PinCFG.GPIO_Output_Speed = GPIO_Speed_10MHz;
 80009d4:	2301      	movs	r3, #1
 80009d6:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCFG);
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	4619      	mov	r1, r3
 80009de:	4845      	ldr	r0, [pc, #276]	; (8000af4 <MCAL_SPI_GPIO_SET_PINs+0x1e4>)
 80009e0:	f7ff fdfb 	bl	80005da <MCAL_GPIO_Init>
			PinCFG.GPIO_PinNumber = GPIO_PIN_7;
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	81bb      	strh	r3, [r7, #12]
			PinCFG.GPIO_Mode = GPIO_Mode_Input_Floating;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCFG);
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	4619      	mov	r1, r3
 80009f2:	4840      	ldr	r0, [pc, #256]	; (8000af4 <MCAL_SPI_GPIO_SET_PINs+0x1e4>)
 80009f4:	f7ff fdf1 	bl	80005da <MCAL_GPIO_Init>
}
 80009f8:	e074      	b.n	8000ae4 <MCAL_SPI_GPIO_SET_PINs+0x1d4>
	}else if (SPIx == SPI2)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a3e      	ldr	r2, [pc, #248]	; (8000af8 <MCAL_SPI_GPIO_SET_PINs+0x1e8>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d170      	bne.n	8000ae4 <MCAL_SPI_GPIO_SET_PINs+0x1d4>
		if(G_SPI_config[SPI2_Index]->Device_Mode == SPI_Device_Mode_Master)
 8000a02:	4b3b      	ldr	r3, [pc, #236]	; (8000af0 <MCAL_SPI_GPIO_SET_PINs+0x1e0>)
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	2b04      	cmp	r3, #4
 8000a0a:	d138      	bne.n	8000a7e <MCAL_SPI_GPIO_SET_PINs+0x16e>
					switch(G_SPI_config[SPI2_Index]->NSS)
 8000a0c:	4b38      	ldr	r3, [pc, #224]	; (8000af0 <MCAL_SPI_GPIO_SET_PINs+0x1e0>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	899b      	ldrh	r3, [r3, #12]
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	d10d      	bne.n	8000a32 <MCAL_SPI_GPIO_SET_PINs+0x122>
						PinCFG.GPIO_PinNumber = GPIO_PIN_12;
 8000a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1a:	81bb      	strh	r3, [r7, #12]
						PinCFG.GPIO_Mode = GPIO_Mode_Output_Alt_Flo_PP;
 8000a1c:	2306      	movs	r3, #6
 8000a1e:	73bb      	strb	r3, [r7, #14]
						PinCFG.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000a20:	2301      	movs	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
						MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4834      	ldr	r0, [pc, #208]	; (8000afc <MCAL_SPI_GPIO_SET_PINs+0x1ec>)
 8000a2c:	f7ff fdd5 	bl	80005da <MCAL_GPIO_Init>
						break;
 8000a30:	bf00      	nop
					PinCFG.GPIO_PinNumber = GPIO_PIN_13;
 8000a32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a36:	81bb      	strh	r3, [r7, #12]
					PinCFG.GPIO_Mode = GPIO_Mode_Output_Alt_Flo_PP;
 8000a38:	2306      	movs	r3, #6
 8000a3a:	73bb      	strb	r3, [r7, #14]
					PinCFG.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	4619      	mov	r1, r3
 8000a46:	482d      	ldr	r0, [pc, #180]	; (8000afc <MCAL_SPI_GPIO_SET_PINs+0x1ec>)
 8000a48:	f7ff fdc7 	bl	80005da <MCAL_GPIO_Init>
					PinCFG.GPIO_PinNumber = GPIO_PIN_14;
 8000a4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a50:	81bb      	strh	r3, [r7, #12]
					PinCFG.GPIO_Mode = GPIO_Mode_Input_Floating;
 8000a52:	2301      	movs	r3, #1
 8000a54:	73bb      	strb	r3, [r7, #14]
					MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4827      	ldr	r0, [pc, #156]	; (8000afc <MCAL_SPI_GPIO_SET_PINs+0x1ec>)
 8000a5e:	f7ff fdbc 	bl	80005da <MCAL_GPIO_Init>
					PinCFG.GPIO_PinNumber = GPIO_PIN_15;
 8000a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a66:	81bb      	strh	r3, [r7, #12]
					PinCFG.GPIO_Mode = GPIO_Mode_Output_Alt_Flo_PP;
 8000a68:	2306      	movs	r3, #6
 8000a6a:	73bb      	strb	r3, [r7, #14]
					PinCFG.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	4619      	mov	r1, r3
 8000a76:	4821      	ldr	r0, [pc, #132]	; (8000afc <MCAL_SPI_GPIO_SET_PINs+0x1ec>)
 8000a78:	f7ff fdaf 	bl	80005da <MCAL_GPIO_Init>
}
 8000a7c:	e032      	b.n	8000ae4 <MCAL_SPI_GPIO_SET_PINs+0x1d4>
					if(G_SPI_config[SPI2_Index]->NSS == SPI_NSS_HW_Slave)
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <MCAL_SPI_GPIO_SET_PINs+0x1e0>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	899b      	ldrh	r3, [r3, #12]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d10a      	bne.n	8000a9e <MCAL_SPI_GPIO_SET_PINs+0x18e>
						PinCFG.GPIO_PinNumber = GPIO_PIN_12;
 8000a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8c:	81bb      	strh	r3, [r7, #12]
						PinCFG.GPIO_Mode = GPIO_Mode_Input_Floating;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	73bb      	strb	r3, [r7, #14]
						MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	4619      	mov	r1, r3
 8000a98:	4818      	ldr	r0, [pc, #96]	; (8000afc <MCAL_SPI_GPIO_SET_PINs+0x1ec>)
 8000a9a:	f7ff fd9e 	bl	80005da <MCAL_GPIO_Init>
					PinCFG.GPIO_PinNumber = GPIO_PIN_13;
 8000a9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa2:	81bb      	strh	r3, [r7, #12]
					PinCFG.GPIO_Mode = GPIO_Mode_Input_Floating;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	73bb      	strb	r3, [r7, #14]
					MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	4619      	mov	r1, r3
 8000aae:	4813      	ldr	r0, [pc, #76]	; (8000afc <MCAL_SPI_GPIO_SET_PINs+0x1ec>)
 8000ab0:	f7ff fd93 	bl	80005da <MCAL_GPIO_Init>
					PinCFG.GPIO_PinNumber = GPIO_PIN_14;
 8000ab4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ab8:	81bb      	strh	r3, [r7, #12]
					PinCFG.GPIO_Mode = GPIO_Mode_Output_Alt_Flo_PP;
 8000aba:	2306      	movs	r3, #6
 8000abc:	73bb      	strb	r3, [r7, #14]
					PinCFG.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <MCAL_SPI_GPIO_SET_PINs+0x1ec>)
 8000aca:	f7ff fd86 	bl	80005da <MCAL_GPIO_Init>
					PinCFG.GPIO_PinNumber = GPIO_PIN_15;
 8000ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ad2:	81bb      	strh	r3, [r7, #12]
					PinCFG.GPIO_Mode = GPIO_Mode_Input_Floating;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	73bb      	strb	r3, [r7, #14]
					MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	4619      	mov	r1, r3
 8000ade:	4807      	ldr	r0, [pc, #28]	; (8000afc <MCAL_SPI_GPIO_SET_PINs+0x1ec>)
 8000ae0:	f7ff fd7b 	bl	80005da <MCAL_GPIO_Init>
}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40013000 	.word	0x40013000
 8000af0:	2000001c 	.word	0x2000001c
 8000af4:	40010800 	.word	0x40010800
 8000af8:	40003800 	.word	0x40003800
 8000afc:	40010c00 	.word	0x40010c00

08000b00 <MCAL_USART_Init>:
 * @param [in]   - P_Cfg: All configuration for USART
 * @retval       - None
 * Note          - None
 */
void MCAL_USART_Init(USART_REG_typedef* USARTx ,USART_PinConfig_t* P_Cfg)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
	Global_USART_config = P_Cfg;
 8000b0a:	4a57      	ldr	r2, [pc, #348]	; (8000c68 <MCAL_USART_Init+0x168>)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	6013      	str	r3, [r2, #0]
	uint32_t pclk , BRR;

    // Enable USART peripherals clock.
	if (USARTx == USART1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a56      	ldr	r2, [pc, #344]	; (8000c6c <MCAL_USART_Init+0x16c>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d106      	bne.n	8000b26 <MCAL_USART_Init+0x26>
		RCC_USART1_Clock_Enable;
 8000b18:	4b55      	ldr	r3, [pc, #340]	; (8000c70 <MCAL_USART_Init+0x170>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a54      	ldr	r2, [pc, #336]	; (8000c70 <MCAL_USART_Init+0x170>)
 8000b1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	e014      	b.n	8000b50 <MCAL_USART_Init+0x50>

	else if (USARTx == USART2)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a52      	ldr	r2, [pc, #328]	; (8000c74 <MCAL_USART_Init+0x174>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d106      	bne.n	8000b3c <MCAL_USART_Init+0x3c>
		RCC_USART2_Clock_Enable;
 8000b2e:	4b50      	ldr	r3, [pc, #320]	; (8000c70 <MCAL_USART_Init+0x170>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	4a4f      	ldr	r2, [pc, #316]	; (8000c70 <MCAL_USART_Init+0x170>)
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	61d3      	str	r3, [r2, #28]
 8000b3a:	e009      	b.n	8000b50 <MCAL_USART_Init+0x50>

	else if (USARTx == USART3)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a4e      	ldr	r2, [pc, #312]	; (8000c78 <MCAL_USART_Init+0x178>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d105      	bne.n	8000b50 <MCAL_USART_Init+0x50>
		RCC_USART3_Clock_Enable;
 8000b44:	4b4a      	ldr	r3, [pc, #296]	; (8000c70 <MCAL_USART_Init+0x170>)
 8000b46:	69db      	ldr	r3, [r3, #28]
 8000b48:	4a49      	ldr	r2, [pc, #292]	; (8000c70 <MCAL_USART_Init+0x170>)
 8000b4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b4e:	61d3      	str	r3, [r2, #28]

	// Enable USART Module (Bit 13 UE: USART enable)
	USARTx->CR1 |= (1 << 13);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	60da      	str	r2, [r3, #12]
	// Enable TX,RX
	USARTx->CR1 |= P_Cfg->USART_Mode;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	683a      	ldr	r2, [r7, #0]
 8000b62:	7812      	ldrb	r2, [r2, #0]
 8000b64:	431a      	orrs	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	60da      	str	r2, [r3, #12]
	// Data length
	USARTx->CR1 |= P_Cfg->Data_Length;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	7a12      	ldrb	r2, [r2, #8]
 8000b72:	431a      	orrs	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	60da      	str	r2, [r3, #12]
	// Configuration of parity bit.
	USARTx->CR1 |= P_Cfg->Parity_Check;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	7a52      	ldrb	r2, [r2, #9]
 8000b80:	431a      	orrs	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60da      	str	r2, [r3, #12]
	// Stop bit
	USARTx->CR2 |= P_Cfg->StopBit;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	691b      	ldr	r3, [r3, #16]
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	7a92      	ldrb	r2, [r2, #10]
 8000b8e:	431a      	orrs	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	611a      	str	r2, [r3, #16]
	// Flow control
	USARTx->CR3 |= P_Cfg->HwFlowControl;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	7ad2      	ldrb	r2, [r2, #11]
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	615a      	str	r2, [r3, #20]
	// Configuration of BRR
	// PCLK 1 <<>> USART 2,3
	// PCLK 2 <<>> USART 1

	if (USARTx == USART1)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a31      	ldr	r2, [pc, #196]	; (8000c6c <MCAL_USART_Init+0x16c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d103      	bne.n	8000bb2 <MCAL_USART_Init+0xb2>
	{
		pclk = MCAL_RCC_Get_PCLK2_Freq();
 8000baa:	f7ff fde7 	bl	800077c <MCAL_RCC_Get_PCLK2_Freq>
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	e002      	b.n	8000bb8 <MCAL_USART_Init+0xb8>
	}
	else
	{
		pclk = MCAL_RCC_Get_PCLK1_Freq();
 8000bb2:	f7ff fdcf 	bl	8000754 <MCAL_RCC_Get_PCLK1_Freq>
 8000bb6:	60f8      	str	r0, [r7, #12]
	}

	BRR = USART_BRR_REG(pclk , P_Cfg->BaudRate);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	011b      	lsls	r3, r3, #4
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc4:	0119      	lsls	r1, r3, #4
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4413      	add	r3, r2
 8000bce:	009a      	lsls	r2, r3, #2
 8000bd0:	441a      	add	r2, r3
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000be8:	2064      	movs	r0, #100	; 0x64
 8000bea:	fb00 f303 	mul.w	r3, r0, r3
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	011b      	lsls	r3, r3, #4
 8000bf2:	4a22      	ldr	r2, [pc, #136]	; (8000c7c <MCAL_USART_Init+0x17c>)
 8000bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf8:	095b      	lsrs	r3, r3, #5
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	430b      	orrs	r3, r1
 8000c00:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	68ba      	ldr	r2, [r7, #8]
 8000c06:	609a      	str	r2, [r3, #8]

	if(P_Cfg->IRQ_Enable != USART_IRQ_Enable_NONE)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	7b1b      	ldrb	r3, [r3, #12]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d026      	beq.n	8000c5e <MCAL_USART_Init+0x15e>
	{
		USARTx->CR1 |=  P_Cfg->IRQ_Enable;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	683a      	ldr	r2, [r7, #0]
 8000c16:	7b12      	ldrb	r2, [r2, #12]
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	60da      	str	r2, [r3, #12]
	
	   if(USARTx == USART1)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <MCAL_USART_Init+0x16c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d106      	bne.n	8000c34 <MCAL_USART_Init+0x134>
			NVIC_IRQ37_USART1_Enable;
 8000c26:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <MCAL_USART_Init+0x180>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a15      	ldr	r2, [pc, #84]	; (8000c80 <MCAL_USART_Init+0x180>)
 8000c2c:	f043 0320 	orr.w	r3, r3, #32
 8000c30:	6013      	str	r3, [r2, #0]
	   else if (USARTx == USART2)
			NVIC_IRQ38_USART2_Enable;
	   else if (USARTx == USART3)
			NVIC_IRQ39_USART3_Enable;
	}
}
 8000c32:	e014      	b.n	8000c5e <MCAL_USART_Init+0x15e>
	   else if (USARTx == USART2)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <MCAL_USART_Init+0x174>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d106      	bne.n	8000c4a <MCAL_USART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable;
 8000c3c:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <MCAL_USART_Init+0x180>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0f      	ldr	r2, [pc, #60]	; (8000c80 <MCAL_USART_Init+0x180>)
 8000c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	e009      	b.n	8000c5e <MCAL_USART_Init+0x15e>
	   else if (USARTx == USART3)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <MCAL_USART_Init+0x178>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d105      	bne.n	8000c5e <MCAL_USART_Init+0x15e>
			NVIC_IRQ39_USART3_Enable;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <MCAL_USART_Init+0x180>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <MCAL_USART_Init+0x180>)
 8000c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5c:	6013      	str	r3, [r2, #0]
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000024 	.word	0x20000024
 8000c6c:	40013800 	.word	0x40013800
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40004400 	.word	0x40004400
 8000c78:	40004800 	.word	0x40004800
 8000c7c:	51eb851f 	.word	0x51eb851f
 8000c80:	e000e104 	.word	0xe000e104

08000c84 <MCAL_USART_SendData>:
 * @param [in]   - Polling enable or not
 * @retval       - None
 * Note          - None
 */
void MCAL_USART_SendData(USART_REG_typedef* USARTx , uint16_t* PTxBuffer , enum Polling_mechansim pollingEn)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	71fb      	strb	r3, [r7, #7]
	if(pollingEn == enable)
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d106      	bne.n	8000ca6 <MCAL_USART_SendData+0x22>
		while(!((USARTx->SR) & (1 << 7)));
 8000c98:	bf00      	nop
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0f9      	beq.n	8000c9a <MCAL_USART_SendData+0x16>
	if(Global_USART_config->Data_Length == USART_Data_Length_9B)
	{
		USARTx->DR = (*PTxBuffer & (uint16_t)0x01FF);
	}else
	{
		USARTx->DR = (*PTxBuffer & (uint8_t)0xFF);
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	605a      	str	r2, [r3, #4]
	}
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
	...

08000cbc <MCAL_USART_ReceiveData>:
 * @param [in]   - Polling enable or not
 * @retval       - None
 * Note          - None
 */
void MCAL_USART_ReceiveData(USART_REG_typedef* USARTx , uint16_t* PRxBuffer , enum Polling_mechansim pollingEn)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	71fb      	strb	r3, [r7, #7]
	if(pollingEn == enable)
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d106      	bne.n	8000cde <MCAL_USART_ReceiveData+0x22>
		while(!((USARTx->SR) & (1 << 5)));
 8000cd0:	bf00      	nop
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0320 	and.w	r3, r3, #32
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d0f9      	beq.n	8000cd2 <MCAL_USART_ReceiveData+0x16>
			{
				*((uint16_t*)PRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
			}
	}else
	{
		if(Global_USART_config->Parity_Check == USART_Parity_Check_NONE)
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <MCAL_USART_ReceiveData+0x58>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	7a5b      	ldrb	r3, [r3, #9]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d107      	bne.n	8000cf8 <MCAL_USART_ReceiveData+0x3c>
		{
			*((uint16_t*)PRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	801a      	strh	r2, [r3, #0]
			*((uint16_t*)PRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
		}

	}

}
 8000cf6:	e007      	b.n	8000d08 <MCAL_USART_ReceiveData+0x4c>
			*((uint16_t*)PRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	801a      	strh	r2, [r3, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000024 	.word	0x20000024

08000d18 <MCAL_USART_GPIO_SET_PIN>:
 * @brief        - Initialization GPIO pins
 * @param [in]   - USARTx: where x is (1,2,3..)
 * Note          - None
 */
void MCAL_USART_GPIO_SET_PIN(USART_REG_typedef* USARTx)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t Pconfig;

	if(USARTx == USART1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a2b      	ldr	r2, [pc, #172]	; (8000dd0 <MCAL_USART_GPIO_SET_PIN+0xb8>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d118      	bne.n	8000d5a <MCAL_USART_GPIO_SET_PIN+0x42>
	{
		Pconfig.GPIO_PinNumber = GPIO_PIN_9;
 8000d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d2c:	81bb      	strh	r3, [r7, #12]
		Pconfig.GPIO_Mode = GPIO_Mode_Output_Alt_Flo_PP;
 8000d2e:	2306      	movs	r3, #6
 8000d30:	73bb      	strb	r3, [r7, #14]
		Pconfig.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000d32:	2301      	movs	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pconfig);
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4825      	ldr	r0, [pc, #148]	; (8000dd4 <MCAL_USART_GPIO_SET_PIN+0xbc>)
 8000d3e:	f7ff fc4c 	bl	80005da <MCAL_GPIO_Init>

		Pconfig.GPIO_PinNumber = GPIO_PIN_10;
 8000d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d46:	81bb      	strh	r3, [r7, #12]
		Pconfig.GPIO_Mode = GPIO_Mode_Input_Floating;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pconfig);
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	4619      	mov	r1, r3
 8000d52:	4820      	ldr	r0, [pc, #128]	; (8000dd4 <MCAL_USART_GPIO_SET_PIN+0xbc>)
 8000d54:	f7ff fc41 	bl	80005da <MCAL_GPIO_Init>
		}

	}


}
 8000d58:	e036      	b.n	8000dc8 <MCAL_USART_GPIO_SET_PIN+0xb0>
	else if (USARTx == USART2)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a1e      	ldr	r2, [pc, #120]	; (8000dd8 <MCAL_USART_GPIO_SET_PIN+0xc0>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d116      	bne.n	8000d90 <MCAL_USART_GPIO_SET_PIN+0x78>
		Pconfig.GPIO_PinNumber = GPIO_PIN_2;
 8000d62:	2304      	movs	r3, #4
 8000d64:	81bb      	strh	r3, [r7, #12]
		Pconfig.GPIO_Mode = GPIO_Mode_Output_Alt_Flo_PP;
 8000d66:	2306      	movs	r3, #6
 8000d68:	73bb      	strb	r3, [r7, #14]
		Pconfig.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pconfig);
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	4619      	mov	r1, r3
 8000d74:	4817      	ldr	r0, [pc, #92]	; (8000dd4 <MCAL_USART_GPIO_SET_PIN+0xbc>)
 8000d76:	f7ff fc30 	bl	80005da <MCAL_GPIO_Init>
		Pconfig.GPIO_PinNumber = GPIO_PIN_3;
 8000d7a:	2308      	movs	r3, #8
 8000d7c:	81bb      	strh	r3, [r7, #12]
		Pconfig.GPIO_Mode = GPIO_Mode_ALT_FLO_Input;
 8000d7e:	2308      	movs	r3, #8
 8000d80:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pconfig);
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	4619      	mov	r1, r3
 8000d88:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <MCAL_USART_GPIO_SET_PIN+0xbc>)
 8000d8a:	f7ff fc26 	bl	80005da <MCAL_GPIO_Init>
}
 8000d8e:	e01b      	b.n	8000dc8 <MCAL_USART_GPIO_SET_PIN+0xb0>
	else if (USARTx == USART3)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <MCAL_USART_GPIO_SET_PIN+0xc4>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d117      	bne.n	8000dc8 <MCAL_USART_GPIO_SET_PIN+0xb0>
		Pconfig.GPIO_PinNumber = GPIO_PIN_10;
 8000d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9c:	81bb      	strh	r3, [r7, #12]
		Pconfig.GPIO_Mode = GPIO_Mode_Output_Alt_Flo_PP;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	73bb      	strb	r3, [r7, #14]
		Pconfig.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000da2:	2301      	movs	r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &Pconfig);
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	4619      	mov	r1, r3
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <MCAL_USART_GPIO_SET_PIN+0xc8>)
 8000dae:	f7ff fc14 	bl	80005da <MCAL_GPIO_Init>
		Pconfig.GPIO_PinNumber = GPIO_PIN_11;
 8000db2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000db6:	81bb      	strh	r3, [r7, #12]
		Pconfig.GPIO_Mode = GPIO_Mode_Input_Floating;
 8000db8:	2301      	movs	r3, #1
 8000dba:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &Pconfig);
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4807      	ldr	r0, [pc, #28]	; (8000de0 <MCAL_USART_GPIO_SET_PIN+0xc8>)
 8000dc4:	f7ff fc09 	bl	80005da <MCAL_GPIO_Init>
}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40013800 	.word	0x40013800
 8000dd4:	40010800 	.word	0x40010800
 8000dd8:	40004400 	.word	0x40004400
 8000ddc:	40004800 	.word	0x40004800
 8000de0:	40010c00 	.word	0x40010c00

08000de4 <USART1_IRQHandler>:



void USART1_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	Global_USART_config->P_IRQ_Callback();
 8000de8:	4b02      	ldr	r3, [pc, #8]	; (8000df4 <USART1_IRQHandler+0x10>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	4798      	blx	r3
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000024 	.word	0x20000024

08000df8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	Global_USART_config->P_IRQ_Callback();
 8000dfc:	4b02      	ldr	r3, [pc, #8]	; (8000e08 <USART2_IRQHandler+0x10>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	691b      	ldr	r3, [r3, #16]
 8000e02:	4798      	blx	r3
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000024 	.word	0x20000024

08000e0c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	Global_USART_config->P_IRQ_Callback();
 8000e10:	4b02      	ldr	r3, [pc, #8]	; (8000e1c <USART3_IRQHandler+0x10>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	4798      	blx	r3
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000024 	.word	0x20000024

08000e20 <__libc_init_array>:
 8000e20:	b570      	push	{r4, r5, r6, lr}
 8000e22:	2500      	movs	r5, #0
 8000e24:	4e0c      	ldr	r6, [pc, #48]	; (8000e58 <__libc_init_array+0x38>)
 8000e26:	4c0d      	ldr	r4, [pc, #52]	; (8000e5c <__libc_init_array+0x3c>)
 8000e28:	1ba4      	subs	r4, r4, r6
 8000e2a:	10a4      	asrs	r4, r4, #2
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	d109      	bne.n	8000e44 <__libc_init_array+0x24>
 8000e30:	f000 f81a 	bl	8000e68 <_init>
 8000e34:	2500      	movs	r5, #0
 8000e36:	4e0a      	ldr	r6, [pc, #40]	; (8000e60 <__libc_init_array+0x40>)
 8000e38:	4c0a      	ldr	r4, [pc, #40]	; (8000e64 <__libc_init_array+0x44>)
 8000e3a:	1ba4      	subs	r4, r4, r6
 8000e3c:	10a4      	asrs	r4, r4, #2
 8000e3e:	42a5      	cmp	r5, r4
 8000e40:	d105      	bne.n	8000e4e <__libc_init_array+0x2e>
 8000e42:	bd70      	pop	{r4, r5, r6, pc}
 8000e44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e48:	4798      	blx	r3
 8000e4a:	3501      	adds	r5, #1
 8000e4c:	e7ee      	b.n	8000e2c <__libc_init_array+0xc>
 8000e4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e52:	4798      	blx	r3
 8000e54:	3501      	adds	r5, #1
 8000e56:	e7f2      	b.n	8000e3e <__libc_init_array+0x1e>
 8000e58:	08000e98 	.word	0x08000e98
 8000e5c:	08000e98 	.word	0x08000e98
 8000e60:	08000e98 	.word	0x08000e98
 8000e64:	08000e9c 	.word	0x08000e9c

08000e68 <_init>:
 8000e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6a:	bf00      	nop
 8000e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e6e:	bc08      	pop	{r3}
 8000e70:	469e      	mov	lr, r3
 8000e72:	4770      	bx	lr

08000e74 <_fini>:
 8000e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e76:	bf00      	nop
 8000e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e7a:	bc08      	pop	{r3}
 8000e7c:	469e      	mov	lr, r3
 8000e7e:	4770      	bx	lr
